,level_0,index,timestamp,eventType_x,contentId_x,personId,sessionId,userAgent,userRegion,userCountry,eventType_y,contentId_y,authorPersonId,authorSessionId,authorUserAgent,authorRegion,authorCountry,contentType,url,title,text,lang,meta
0,0,0,1461689512,VIEW,6989198691754522425,7890134385692540512,-2241007388742885017,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.86 Safari/537.36",MG,BR,CONTENT SHARED,6989198691754522425,7890134385692540512,-2241007388742885017,,,,HTML,https://www.sympla.com.br/front-in-bh-2016__54441,title,"Descrição do evento O Front in BH nasceu da necessidade de fortalecer a comunidade Front-end local, através de um circuito de palestras focado em promover o relacionamento e a integração entre os profissionais de Front-end e das áreas a afins. Além de profissionalizar ainda mais o mercado com a contribuição das palestras para a formação de profissionais mais críticos e capacitados, o Front in BH é pioneiro na abordagem de temas atuais e de interesse comum às áreas de desenvolvimento, design, métricas e afins, através de palestrantes renomados no mercado de desenvolvimento Front-end no Brasil e no exterior. Este pioneirismo impulsionou outros grupos a se organizarem, levando o conceito do Front in BH para pelo menos 5 regiões do país. Hoje o Front in BH chega à sua quinta edição com um passado de grande sucesso e a reputação de ser o melhor evento de Front-end do Brasil novamente.",pt,t i t l e
1,1,1,1463600500,VIEW,-8669770849634489893,436785895835580263,6453978556866260263,"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",MG,BR,CONTENT SHARED,-8762137947059829459,-5823562314929634489,-7617128124057678820,,,,HTML,https://developers.googleblog.com/2016/05/google-io-2016-develop-grow-earn.html,title,"Earlier today, we kicked off our 10-year celebration of hosting developer events with Google I/O in front of over 7,000 developers at Shoreline Amphitheatre, and with millions of other viewers on the I/O live stream around the world. During the keynote, we had a number of announcements that featured tools for Android, iOS, and mobile Web developers, showcased the power of machine learning for delivering better user experiences, and introduced a previewed platform for high quality, mobile virtual reality. And over the next three days at the festival, we'll continue to focus on things that matter to you: Develop , to build high quality apps; Grow & Earn , to find high quality users, increase user engagement and create successful businesses; and What's Next , a look at new platforms for future growth. Develop, Grow & Earn with Firebase Those core themes are best represented in our launch of Firebase . As shared during the keynote, we've significantly expanded Firebase beyond a mobile backend to include brand new features, like mobile analytics, growth tools, and crash reporting. Firebase is now a suite of 15 features and integrations designed to help you develop your app, grow a user base and earn money. At the heart of the suite is a new mobile analytics tool we built from the ground up called Firebase Analytics. Available for free and unlimited usage, Firebase Analytics is inspired by our decade-long experience running Google Analytics, but designed specifically for the unique needs of apps. Let's also take a closer look at the other major developer news at I/O: Develop Android N Developer Preview 3 - Get a look at the next release of Android N focused on performance, productivity and security. Even better, Android N is now ready to test on primary phones or tablets. Android VR - A rework of the entire Android stack in N to tailor it to provide high quality mobile VR experiences. Android Studio 2.2 Preview - Our new preview focuses on speed, smarts, and Android platform support. This major update includes a completely rewritten, feature-rich Layout Designer. Android Wear 2.0 : A developer preview of the biggest platform update since we launched Android Wear two years ago. It includes updated design guidelines and APIs that make the watch even more useful for watch faces, messaging, and fitness. Apps on the watch can now be standalone, with direct network access to the cloud. Recording APIs : enables Android TV app developers and content providers to bring recording functionality to live channels. Google Play services 9.0 - In addition to Firebase, the next release includes new API updates for Ads, Nearby and Play Games services. Android Pay APIs - A new set of tools that includes support for mobile web, Instant Apps, Save to Android Pay and an API for issuers. We'll have more to share during the session ""Android Pay everywhere: New developments"" later today at 2:00 PM PT Stage 1 Hercules. Progressive Web Apps - A new set of capabilities to build app-like mobile websites that work reliably on the worst network connections and can send notifications to re-engage users. Credentials API - The latest version of Chrome now supports the Credential Management API, allowing sites to interact with the browser's credential manager to improve the sign in experience for users. The API enables users to sign in with one tap and lets them automatically sign back in when returning to the site. Accelerated Mobile Pages - Check out the AMP project, an open source initiative that is helping publishers create mobile-optimized content once and have it load instantly everywhere. Grow & Earn Reach a global audience on Google Play - New and powerful tools to help you grow your business: discover and join beta tests from the Play Store (including a new Early Access section), discover collections of complementary apps to help users solve complex tasks, see how your app runs on real devices with a new pre-launch report, get insights and benchmarks for reviews and user acquisition, monitor your app stats and get notifications when your updates are live with the new Play Console app, and more. Android Instant Apps - With Android Instant Apps, users can open your app simply by tapping on a link, even if they don't have the app installed. Instant Apps is compatible with Android Jelly Bean and later, reaching over a billion users. We're working with a small set of developers now, and we'll be gradually expanding access. Building for billions - New resources to help you optimize your app and get your business ready to serve over a billion Android users around the world. Universal App Campaigns - Last year, we introduced Universal App Campaigns as a simple and powerful way to surface apps to the billions of users across Google Play, Search, YouTube, and the Google Display Network. We're building on this success by expanding onto iOS and by helping developers use insights to optimize for lifetime value. See our new apps best practices . What's Next Awareness API : We'll be previewing a new, unified sensing platform that enables apps to be aware of all aspects of a user's context, while managing system health for you. Learn more at the ""Introducing Awareness API: an easy way to make your apps context aware"" session later today at 3:00 PM PT in Stage 5 Libra. Daydream - We'll have more to share on how developers can start building Daydream apps during the ""VR at Google"" session tomorrow (May 19) at 9:00 AM PT in the Amphitheatre and livestreamed . Chromebooks - Hear from the team firsthand what's new with Chromebooks tomorrow (May 19) at 11:00 AM PT in Stage 8 Crater. The Mobile Web - We'll share what we're doing to improve the mobile web experience for developers and users tomorrow (May 19) at 2:00 PM PT in the Amphitheatre.",en,t i t l e
2,2,2,1465424159,VIEW,-2948321821574578861,7527226129639571966,3989456265529686673,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36",VA,US,CONTENT SHARED,-2948321821574578861,7527226129639571966,3989456265529686673,,,,HTML,http://arquiteturadeinformacao.com/usabilidade/quando-usar-paginacao-e-quando-user-scroll-infinito/,title,"Scroll infinito é uma técnica que permite que o usuário continue rolando por uma infinidade de conteúdos sem precisar em nenhum momento apertar nenhum botão para carregar mais. Depois exemplos famosos desse tipo de interação são o newsfeed do Facebook, e o seu feed pessoal do Pinterest: você continua rolando a página indefinidamente, sem nunca precisar trocar de página ou apertar um botão para carregar mais itens. Aliás, essa técnica está totalmente alinhada com a estratégia desses serviços: eles não querem que você se dê conta que já está rolando a página há um tempão e que você chegou ao final dela; quanto menos você perceber isso, melhor . Por isso o scroll infinito é um ótimo alinhado de serviços que medem seu sucesso pelo tempo de engajamento do usuário no site ou aplicativo. O lado negativo do scroll infinito Na verdade é plural: negativos. Falta de sensação de controle. Alcançar um ""ponto final"" dá ao usuário a sensação de controle. Quando você tem um número de resultados limitados, você consegue facilmente se o resultado que você procura está ali ou não. No scroll infinito isso fica impossível, porque você não faz ideia do que vem pela frente. Falta de localização. Porque o feed é infinito, o usuário não consegue determinar um ponto específico na página onde está a informação que ele está procurando. Mesmo que ele consiga na primeira visita; em sua segunda visita ele já não consegue mais localizar onde estava aquela informação, já que a localização geográfica do conteúdo varia muito no scroll infinito. Além dos problemas acima, o scroll infinito ainda pode trazer um problema de performance para sua página ou app, já que carregar muito conteúdo na mesma página requer muita memória do seu browser. Por fim, se o usuário está tentando chegar até o rodapé do site para encontrar um link (termos de serviço, contato, etc.), ele pode se sentir frustrado com o fato de a página carregar mais conteúdo toda vez que ele volta a scrollar. A alternativa para isso é simplesmente não ter um rodapé, ou colocar os links que iriam rodapé em outro lugar do site. Quando usar paginação e quando usar scroll infinito? Scroll infinito funciona melhor para sites com conteúdo gerado por usuários (exemplo: Twitter, Facebook), conteúdo visual (exemplo: Pinterest, Google Images) ou sites que pretendem equilibrar a quantidade de tráfego em seu conteúdo. Já a paginação é mais universal, e funciona melhor para plataformas onde o usuário tem uma tarefa bem específica em mente (exemplo: busca do Google). Concorda? Discorda?",pt,t i t l e
3,3,3,1460632316,LIKE,-7681408188643141872,7948079555216525045,8576548566370225994,,,,CONTENT SHARED,6517454521720712627,-2979881261169775358,3794186808815355888,,,,HTML,https://wiki.debian.org/Creating%20signed%20GitHub%20releases,title,"A collection of non-sequential, undifferentiated commit hashes is not a good way to refer to known releases of your software. It is a good idea to explicitly create releases each with a clear, meaningful version string. This makes packaging work much easier and also provides an easy to use mechanism for your users to get a specific version of your software.",en,t i t l e
4,4,4,1461608361,VIEW,-5636731245639685654,4942487288765370891,7507187980365281214,"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36",SP,BR,CONTENT SHARED,5238119115012015307,-3390049372067052505,6068971232842203123,,,,HTML,https://hbr.org/2016/05/embracing-agile,title,"Idea in Brief The Problem Agile methods such as scrum, kanban, and lean development are spreading beyond IT to other functions. Although some companies are scoring big improvements in productivity, speed to market, and customer and employee satisfaction, others are struggling. The Root Cause Leaders don't really understand agile. As a result, they unwittingly continue to employ conventional management practices that undermine agile projects. The Solution Learn the basics of agile. Understand the conditions in which it does or doesn't work. Start small and let it spread organically. Allow ""master"" teams to customize it. Employ agile at the top. Destroy the barriers to agile behaviors. Agile innovation methods have revolutionized information technology. Over the past 25 to 30 years they have greatly increased success rates in software development, improved quality and speed to market, and boosted the motivation and productivity of IT teams. Now agile methodologies-which involve new values, principles, practices, and benefits and are a radical alternative to command-and-control-style management-are spreading across a broad range of industries and functions and even into the C-suite. National Public Radio employs agile methods to create new programming. John Deere uses them to develop new machines, and Saab to produce new fighter jets. Intronis, a leader in cloud backup services, uses them in marketing. C.H. Robinson, a global third-party logistics provider, applies them in human resources. Mission Bell Winery uses them for everything from wine production to warehousing to running its senior leadership group. And GE relies on them to speed a much-publicized transition from 20th-century conglomerate to 21st-century ""digital industrial company."" By taking people out of their functional silos and putting them in self-managed and customer-focused multidisciplinary teams, the agile approach is not only accelerating profitable growth but also helping to create a new generation of skilled general managers. The spread of agile raises intriguing possibilities. What if a company could achieve positive returns with 50% more of its new-product introductions? What if marketing programs could generate 40% more customer inquiries? What if human resources could recruit 60% more of its highest-priority targets? What if twice as many workers were emotionally engaged in their jobs? Agile has brought these levels of improvement to IT. The opportunity in other parts of the company is substantial. But a serious impediment exists. When we ask executives what they know about agile, the response is usually an uneasy smile and a quip such as ""Just enough to be dangerous."" They may throw around agile-related terms (""sprints,"" ""time boxes"") and claim that their companies are becoming more and more nimble. But because they haven't gone through training, they don't really understand the approach. Consequently, they unwittingly continue to manage in ways that run counter to agile principles and practices, undermining the effectiveness of agile teams in units that report to them. These executives launch countless initiatives with urgent deadlines rather than assign the highest priority to two or three. They spread themselves and their best people across too many projects. They schedule frequent meetings with members of agile teams, forcing them to skip working sessions or send substitutes. Many of them become overly involved in the work of individual teams. They talk more than listen. They promote marginal ideas that a team has previously considered and back-burnered. They routinely overturn team decisions and add review layers and controls to ensure that mistakes aren't repeated. With the best of intentions, they erode the benefits that agile innovation can deliver. Further Reading Innovation Digital Article IT's most famous idea didn't start in IT. Innovation is what agile is all about. Although the method is less useful in routine operations and processes, these days most companies operate in highly dynamic environments. They need not just new products and services but also innovation in functional processes, particularly given the rapid spread of new software tools. Companies that create an environment in which agile flourishes find that teams can churn out innovations faster in both those categories. From our work advising and studying such companies, we have discerned six crucial practices that leaders should adopt if they want to capitalize on agile's potential. 1. Learn How Agile Really Works Some executives seem to associate agile with anarchy (everybody does what he or she wants to), whereas others take it to mean ""doing what I say, only faster."" But agile is neither. (See the sidebar ""Agile Values and Principles."") It comes in several varieties, which have much in common but emphasize slightly different things. They include scrum, which emphasizes creative and adaptive teamwork in solving complex problems; lean development, which focuses on the continual elimination of waste; and kanban, which concentrates on reducing lead times and the amount of work in process. One of us (Jeff Sutherland) helped develop the scrum methodology and was inspired to do so in part by ""The New New Product Development Game,"" a 1986 HBR article coauthored by another of us (Hirotaka Takeuchi). Because scrum and its derivatives are employed at least five times as often as the other techniques, we will use its methodologies to illustrate agile practices. There are at least a dozen agile innovation methodologies, which share values and principles but differ in their emphases. Experts often combine various approaches. Here are three of the most popular forms and the contexts in which each works best. Guiding Principles Empower creative, cross-functional teams Visualize workflows and limit work in process Eliminate waste from the system as a whole Favorable Conditions for Adoption Creative cultures with high levels of trust and collaboration, or Radical innovation teams that want to change their working environment Process-oriented cultures that prefer evolutionary improvements with few prescribed practices Process-oriented cultures that prefer evolutionary improvements with overarching values but no prescribed practices Prescribed Roles Initiative owners responsible for rank ordering team priorities and delivering value to customers and the business Process facilitators who guide the work process Small, cross-functional, innovation teams None None Prescribed Work Rules Five events: Sprint planning to prepare for the next round of work Fixed time sprints of consistent duration (1-4 weeks) to create a potentially releasable product increment Daily stand-ups of 15 minutes to review progress and surface impediments Sprint reviews that inspect the new working increment Sprint retrospectives for the team to inspect and improve itself Three deliverables (or ""artifacts""): Portfolio backlog, a fluid and rank-ordered list of potential innovation features Sprint backlog, the subset of portfolio backlog items selected for completion in the next sprint Releasable working increments Start with what you do now Visualize workflows and stages Limit the work in process at each development stage Measure and improve cycle times None Approach to Cultural Change Quickly adopt minimally prescribed practices, even if they differ substantially from those in the rest of the organization Master prescribed practices and then adapt them through experimentation Respect current structures and processes Increase visibility into workflows Encourage gradual, collaborative changes Respect current structures and processes Stress agile values throughout the organization while minimizing organizational resistance Advantages Facilitates radical breakthroughs while (unlike skunkworks) retaining the benefits of operating as part of the parent organization Delivers the most valuable innovations earliest Rapidly increases team happiness Builds general management skills Avoids clashes with the parent organization's culture Maximizes the contributions of team members through flexible team structures and work cycles Facilitates rapid responses to urgent issues through flexible work cycles Optimizes the system as a whole and engages the entire organization Provides the ultimate flexibility in customizing work practices Challenges Leaders may struggle to prioritize initiatives and relinquish control to self-managing teams New matrix-management skills are required to coordinate dozens or hundreds of multi-disciplinary teams Fixed iteration times may not be suitable for some problems (especially those that arise on a daily basis) Some team members may be underutilized in certain sprint cycles Practitioners must figure out how best to apply most agile values and principles Wide variation in practices can complicate the prioritization of initiatives and coordination among teams When initiatives don't succeed, it can be hard to determine whether teams selected the wrong tools or used the right tools in the wrong ways Novices trying to change behaviors may find the lack of prescriptive methodologies frustrating Evolutionary improvements can make radical breakthroughs less likely and major improvements less rapid Leaders need to make the grind of continuously eliminating waste feel inspirational and fun Source Darrell K. Rigby, Jeff Sutherland, and Hirotaka Takeuchi From ""Embracing Agile,"" April 2016 The fundamentals of scrum are relatively simple. To tackle an opportunity, the organization forms and empowers a small team, usually three to nine people, most of whom are assigned full-time. The team is cross-functional and includes all the skills necessary to complete its tasks. It manages itself and is strictly accountable for every aspect of the work. The team's ""initiative owner"" (also known as a product owner) is ultimately responsible for delivering value to customers (including internal customers and future users) and to the business. The person in this role usually comes from a business function and divides his or her time between working with the team and coordinating with key stakeholders: customers, senior executives, and business managers. The initiative owner may use a technique such as design thinking or crowdsourcing to build a comprehensive ""portfolio backlog"" of promising opportunities. Then he or she continually and ruthlessly rank-orders that list according to the latest estimates of value to internal or external customers and to the company. The initiative owner doesn't tell the team who should do what or how long tasks will take. Rather, the team creates a simple road map and plans in detail only those activities that won't change before execution. Its members break the highest-ranked tasks into small modules, decide how much work the team will take on and how to accomplish it, develop a clear definition of ""done,"" and then start building working versions of the product in short cycles (less than a month) known as sprints. A process facilitator (often a trained scrum master) guides the process. This person protects the team from distractions and helps it put its collective intelligence to work. The process is transparent to everyone. Team members hold brief daily ""stand-up"" meetings to review progress and identify roadblocks. They resolve disagreements through experimentation and feedback rather than endless debates or appeals to authority. They test small working prototypes of part or all of the offering with a few customers for short periods of time. If customers get excited, a prototype may be released immediately, even if some senior executive isn't a fan, or others think it needs more bells and whistles. The team then brainstorms ways to improve future cycles and prepares to attack the next top priority. In 2001, 17 rebellious software developers (including Jeff Sutherland) met in Snowbird, Utah, to share ideas for improving traditional ""waterfall"" development, in which detailed requirements and execution plans are created up front and then passed sequentially from function to function. This approach worked fine in stable environments, but not when software markets began to change rapidly and unpredictably. In that scenario, product specifications were outdated by the time the software was delivered to customers, and developers felt oppressed by bureaucratic procedures. The rebels proposed four new values for developing software, described principles to guide adherence to those values, and dubbed their call to arms ""The Agile Manifesto."" To this day, development frameworks that follow these values and principles are known as agile techniques. Here is an adapted version of the manifesto: People Over Processes and Tools Projects should be built around motivated individuals who are given the support they need and trusted to get the job done. Teams should abandon the assembly-line mentality in favor of a fun, creative environment for problem solving, and should maintain a sustainable pace. Employees should talk face-to-face and suggest ways to improve their work environment. Management should remove impediments to easier, more fruitful collaboration. Working Prototypes Over Excessive Documentation Innovators who can see their results in real market conditions will learn faster, be happier, stay longer, and do more-valuable work. Teams should experiment on small parts of the product with a few customers for short periods, and if customers like them, keep them. If customers don't like them, teams should figure out fixes or move on to the next thing. Team members should resolve arguments with experiments rather than endless debates or appeals to authority. Respond to Change Rather Than Follow a Plan Most detailed predictions and plans of conventional project management are a waste of time and money. Although teams should create a vision and plan, they should plan only those tasks that won't have changed by the time they get to them. And people should be happy to learn things that alter their direction, even late in the development process. That will put them closer to the customer and make for better results. Customer Collaboration Over Rigid Contracts Time to market and cost are paramount, and specifications should evolve throughout the project, because customers can seldom predict what they will actually want. Rapid prototyping, frequent market tests, and constant collaboration keep work focused on what they will ultimately value. Compared with traditional management approaches, agile offers a number of major benefits, all of which have been studied and documented. It increases team productivity and employee satisfaction. It minimizes the waste inherent in redundant meetings, repetitive planning, excessive documentation, quality defects, and low-value product features. By improving visibility and continually adapting to customers' changing priorities, agile improves customer engagement and satisfaction, brings the most valuable products and features to market faster and more predictably, and reduces risk. By engaging team members from multiple disciplines as collaborative peers, it broadens organizational experience and builds mutual trust and respect. Finally, by dramatically reducing the time squandered on micromanaging functional projects, it allows senior managers to devote themselves more fully to higher-value work that only they can do: creating and adjusting the corporate vision; prioritizing strategic initiatives; simplifying and focusing work; assigning the right people to tasks; increasing cross-functional collaboration; and removing impediments to progress. 2. Understand Where Agile Does or Does Not Work Agile is not a panacea. It is most effective and easiest to implement under conditions commonly found in software innovation: The problem to be solved is complex; solutions are initially unknown, and product requirements will most likely change; the work can be modularized; close collaboration with end users (and rapid feedback from them) is feasible; and creative teams will typically outperform command-and-control groups. In our experience, these conditions exist for many product development functions, marketing projects, strategic-planning activities, supply-chain challenges, and resource allocation decisions. They are less common in routine operations such as plant maintenance, purchasing, sales calls, and accounting. And because agile requires training, behaviorial change, and often new information technologies, executives must decide whether the anticipated payoffs will justify the effort and expense of a transition. Conditions Favorable Unfavorable Market Environment Customer preferences and solution options change frequently. Market conditions are stable and predictable. Customer Involvement Close collaboration and rapid feedback are feasible. Customers know better what they want as the process progresses. Requirements are clear at the outset and will remain stable. Customers are unavailable for constant collaboration. Innovation Type Problems are complex, solutions are unknown, and the scope isn't clearly defined. Product specifications may change. Creative breakthroughs and time to market are important. Cross-functional collaboration is vital. Similar work has been done before, and innovators believe the solutions are clear. Detailed specifications and work plans can be forecast with confidence and should be adhered to. Problems can be solved sequentially in functional silos. Modularity of Work Incremental developments have value, and customers can use them. Work can be broken into parts and conducted in rapid, iterative cycles. Late changes are manageable. Customers cannot start testing parts of the product until everything is complete. Late changes are expensive or impossible. Impact of Interim Mistakes They provide valuable learning. They may be catastrophic. Agile innovation also depends on having a cadre of eager participants. One of its core principles is ""Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done."" When the majority of a company, a function, or a team chooses to adopt agile methodologies, leaders may need to press the holdouts to follow suit or even replace them. But it's better to enlist passionate volunteers than to coerce resisters. OpenView Venture Partners, a firm that has invested in about 30 companies, took this path. Having learned about agile from some of the companies in its portfolio, Scott Maxwell, the firm's founder, began using its methodologies at the firm itself. He found that they fit some activities more easily than others. Agile worked well for strategic planning and marketing, for instance, where complex problems can often be broken into modules and cracked by creative multidisciplinary teams. That wasn't the case for selling: Any sales call can change a representative's to-do list on the spot, and it would be too complicated and time-consuming to reassemble the sales team, change the portfolio backlog, and reassign accounts every hour. Maxwell provided the companies in OpenView's portfolio with training in agile principles and practices and let them decide whether to adopt the approach. Some of them immediately loved the idea of implementing it; others had different priorities and decided to hold off. Intronis was one fan. Its marketing unit at the time relied on an annual plan that focused primarily on trade shows. Its sales department complained that marketing was too conservative and not delivering results. So the company hired Richard Delahaye, a web developer turned marketer, to implement agile. Under his guidance the marketing team learned, for example, how to produce a topical webinar in a few days rather than several weeks. (A swiftly prepared session on CryptoLocker malware attracted 600 registrants-still a company record.) Team members today continue to create calendars and budgets for the digital marketing unit, but with far less line-item detail and greater flexibility for serendipitous developments. The sales team is much happier. 3. Start Small and Let the Word Spread Large companies typically launch change programs as massive efforts. But the most successful introductions of agile usually start small. They often begin in IT, where software developers are likely to be familiar with the principles. Then agile might spread to another function, with the original practitioners acting as coaches. Each success seems to create a group of passionate evangelists who can hardly wait to tell others in the organization how well agile works. The adoption and expansion of agile at John Deere, the farm equipment company, provides an example. George Tome, a software engineer who had become a project manager within Deere's corporate IT group, began applying agile principles in 2004 on a low-key basis. Gradually, over several years, software development units in other parts of Deere began using them as well. This growing interest made it easier to introduce the methodology to the company's business development and marketing organizations. In 2012 Tome was working as a manager in the Enterprise Advanced Marketing unit of the R&D group responsible for discovering technologies that could revolutionize Deere's offerings. Jason Brantley, the unit head, was concerned that traditional project management techniques were slowing innovation, and the two men decided to see whether agile could speed things up. Tome invited two other unit managers to agile training classes. But all the terminology and examples came from software, and to one of the managers, who had no software background, they sounded like gibberish. Tome realized that others would react the same way, so he tracked down an agile coach who knew how to work with people without a software background. In the past few years he and the coach have trained teams in all five of the R&D group's centers. Tome also began publishing weekly one-page articles about agile principles and practices, which were e-mailed to anyone interested and later posted on Deere's Yammer site. Hundreds of Deere employees joined the discussion group. ""I wanted to develop a knowledge base about agile that was specific to Deere so that anyone within the organization could understand it,"" Tome says. ""This would lay the foundation for moving agile into any part of the company."" Using agile techniques, Enterprise Advanced Marketing has significantly compressed innovation project cycle times-in some cases by more than 75%. One example is the development in about eight months of a working prototype of a new ""machine form"" that Deere has not yet disclosed. ""If everything went perfectly in a traditional process,"" Brantley says, ""it would be a year and a half at best, and it could be as much as two and a half or three years."" Agile generated other improvements as well. Team engagement and happiness in the unit quickly shot from the bottom third of companywide scores to the top third. Quality improved. Velocity (as measured by the amount of work accomplished in each sprint) increased, on average, by more than 200%; some teams achieved an increase of more than 400%, and one team soared 800%. Success like this attracts attention. Today, according to Tome, in almost every area at John Deere someone is either starting to use agile or thinking about how it could be used. 4. Allow ""Master"" Teams to Customize Their Practices Japanese martial arts students, especially those studying aikido, often learn a process called shu-ha-ri. In the shu state they study proven disciplines. Once they've mastered those, they enter the ha state, where they branch out and begin to modify traditional forms. Eventually they advance to ri, where they have so thoroughly absorbed the laws and principles that they are free to improvise as they choose. Mastering agile innovation is similar. Before beginning to modify or customize agile, a person or team will benefit from practicing the widely used methodologies that have delivered success in thousands of companies. For instance, it's wise to avoid beginning with part-time assignment to teams or with rotating membership. Empirical data shows that stable teams are 60% more productive and 60% more responsive to customer input than teams that rotate members. Further Reading Managing People Feature The Toyota principles can be applied in operations involving expertise. Over time, experienced practitioners should be permitted to customize agile practices. For example, one principle holds that teams should keep their progress and impediments constantly visible. Originally, the most popular way of doing this was by manually advancing colored sticky notes from the ""to-do"" column to ""doing"" to ""done"" on large whiteboards (known as kanban boards). Many teams are still devoted to this practice and enjoy having nonmembers visit their team rooms to view and discuss progress. But others are turning to software programs and computer screens to minimize input time and allow the information to be shared simultaneously in multiple locations. A key principle guides this type of improvisation: If a team wants to modify particular practices, it should experiment and track the results to make sure that the changes are improving rather than reducing customer satisfaction, work velocity, and team morale. Spotify, the music-streaming company, exemplifies an experienced adapter. Founded in 2006, the company was agile from birth, and its entire business model, from product development to marketing and general management, is geared to deliver better customer experiences through agile innovation. But senior leaders no longer dictate specific practices; on the contrary, they encourage experimentation and flexibility as long as changes are consistent with agile principles and can be shown to improve outcomes. As a result, practices vary across the company's 70 ""squads"" (Spotify's name for agile innovation teams) and its ""chapters"" (the company term for functional competencies such as user interface development and quality testing). Although nearly every squad consists of a small cross-functional team and uses some form of visual progress tracking, ranked priorities, adaptive planning, and brainstorming sessions on how to improve the work process, many teams omit the ""burndown"" charts (which show work performed and work remaining) that are a common feature of agile teams. Nor do they always measure velocity, keep progress reports, or employ the same techniques for estimating the time required for a given task. These squads have tested their modifications and found that they improve results. 5. Practice Agile at the Top Some C-suite activities are not suited to agile methodologies. (Routine and predictable tasks-such as performance assessments, press interviews, and visits to plants, customers, and suppliers-fall into this category.) But many, and arguably the most important, are. They include strategy development and resource allocation, cultivating breakthrough innovations, and improving organizational collaboration. Senior executives who come together as an agile team and learn to apply the discipline to these activities achieve far-reaching benefits. Their own productivity and morale improve. They speak the language of the teams they are empowering. They experience common challenges and learn how to overcome them. They recognize and stop behaviors that impede agile teams. They learn to simplify and focus work. Results improve, increasing confidence and engagement throughout the organization. A number of companies have reallocated 25% or more of selected leaders' time from functional silos to agile leadership teams. These teams rank-order enterprisewide portfolio backlogs, establish and coordinate agile teams elsewhere in the organization to address the highest priorities, and systematically eliminate barriers to their success. Here are three examples of C-suites that took up agile: 1. Catching up with the troops. Systematic, a 525-employee software company, began applying agile methodologies in 2005. As they spread to all its software development teams, Michael Holm, the company's CEO and cofounder, began to worry that his leadership team was hindering progress. ""I had this feeling that I was saying, 'Follow me-I'm just behind you,'"" he told us. ""The development teams were using scrum and were doing things differently, while the management team was stuck doing things the same old-fashioned way""-moving too slowly and relying on too many written reports that always seemed out-of-date. So in 2010 Holm decided to run his nine-member executive group as an agile team. The team reprioritized management activities, eliminating more than half of recurring reports and converting others to real-time systems while increasing attention to business-critical items such as sales proposals and customer satisfaction. The group started by meeting every Monday for an hour or two but found the pace of decision making too slow. So it began having daily 20-minute stand-ups at 8:40 am to discuss what members had done the day before, what they would do that day, and where they needed help. More recently the senior team began to use physical boards to track its own actions and the improvements coming from the business units. Other functions, including HR, legal, finance, and sales, now operate in much the same way. 2. Speeding a corporate transition. In 2015 General Electric rebranded itself as a ""digital industrial company,"" with a focus on digitally enabled products. Part of the transformation involved creating GE Digital, an organizational unit that includes all 20,000-plus of the company's software-related employees. Brad Surak, who began his career as a software engineer and is now GE Digital's COO, was intimately familiar with agile. He piloted scrum with the leadership team responsible for developing industrial internet applications and then, more recently, began applying it to the new unit's management processes, such as operating reviews. Surak is the initiative owner, and an engineering executive is the scrum master. Together they have prioritized backlog items for the executive team to address, including simplifying the administrative process that teams follow to acquire hardware and solving knotty pricing issues for products requiring input from multiple GE businesses. Agile Alliance: For guides to agile practices, links to ""The Agile Manifesto,"" and training videos Scrum Alliance: For a ""Scrum Guide,"" conference presentations and videos, and the ""State of Scrum"" research report ScrumLab Open: For training presentations, videos, webinars, and published papers Annual State of Agile Survey: For key statistics such as usage rates, customer benefits, barriers to adoption and success, and specific practices used The scrum team members run two-week sprints and conduct stand-up meetings three times a week. They chart their progress on a board in an open conference room where any employee can see it. Surak says, ""It takes the mystery out of what executives do every day. Our people want to know if we are in tune with what they care about as employees."" The team collects employee happiness surveys, conducts root cause analysis on the impediments to working more effectively, and reports back to people throughout the organization, saying (in effect), ""We heard you. Here is how we will improve things."" Surak believes that this shows the organization that ""executives work in the same ways as engineers,"" increasing employee motivation and commitment to agile practices. 3. Aligning departments and functions on a common vision. Erik Martella, the vice president and general manager of Mission Bell Winery, a production facility of Constellation Brands, introduced agile and helped it spread throughout the organization. Leaders of each department served as initiative owners on the various agile teams within their departments. Those individual teams achieved impressive results, but Martella worried that their time was being spread too thin and that department and enterprise priorities weren't always aligned. He decided to pull department leaders into an executive agile team focused on the enterprise initiatives that held the greatest value and the greatest opportunity for cross-functional collaboration, such as increasing process flows through the warehouse. The team is responsible for building and continually refining the backlog of enterprise priorities, ensuring that agile teams are working on the right problems and have sufficient resources. Team members also protect the organization from pet projects that don't deserve high priority. For instance, shortly after Martella started implementing agile, he received an e-mail from a superior in Constellation's corporate office suggesting that the winery explore a personal passion of the sender. Previously, Martella might have responded, ""OK, we'll jump right on it."" Instead, he replied that the winery was following agile principles: The idea would be added to the list of potential opportunities and prioritized. As it happened, the executive liked the approach-and when he was informed that his suggestion had been assigned a low priority, he readily accepted the decision. Working on agile teams can also help prepare functional managers-who rarely break out of their silos in today's overspecialized organizations-for general management roles. It exposes them to people in other disciplines, teaches collaborative practices, and underscores the importance of working closely with customers-all essential for future leaders. 6. Destroy the Barriers to Agile Behaviors Research by Scrum Alliance, an independent nonprofit with 400,000-plus members, has found that more than 70% of agile practitioners report tension between their teams and the rest of the organization. Little wonder: They are following different road maps and moving at different speeds. Here's a telling example: A large financial services company we examined launched a pilot to build its next mobile app using agile methodologies. Of course, the first step was to assemble a team. That required a budget request to authorize and fund the project. The request went into the batch of submissions vying for approval in the next annual planning process. After months of reviews, the company finally approved funding. The pilot produced an effective app that customers praised, and the team was proud of its work. But before the app was released, it had to pass vulnerability testing in a traditional ""waterfall"" process (a protracted sequence in which the computer code is tested for documentation, functionality, efficiency, and standardization), and the queue for the process was long. Then the app had to be integrated into core IT systems-which involved another waterfall process with a six-to-nine-month logjam. In the end, the total time to release improved very little. Further Reading Human resource management Magazine Article The Toyota story has been intensively researched and painstakingly documented, yet what really happens inside the company remains a mystery. Here's new insight into the unspoken rules that give Toyota its competitive edge. Here are some techniques for destroying such barriers to agile: Get everyone on the same page. Individual teams focusing on small parts of large, complex problems need to see, and work from, the same list of enterprise priorities-even if not all the teams responsible for those priorities are using agile processes. If a new mobile app is the top priority for software development, it must also be the top priority for budgeting, vulnerability testing, and software integration. Otherwise, agile innovations will struggle in implementation. This is a key responsibility of an executive team that itself practices agile. Don't change structures right away; change roles instead. Many executives assume that creating more cross-functional teams will necessitate major changes in organizational structure. That is rarely true. Highly empowered cross-functional teams do, by definition, need some form of matrix management, but that requires primarily that different disciplines learn how to work together simultaneously rather than separately and sequentially. Name only one boss for each decision. People can have multiple bosses, but decisions cannot. In an agile operating model it must be crystal clear who is responsible for commissioning a cross-functional team, selecting and replacing team members, appointing the team leader, and approving the team's decisions. An agile leadership team often authorizes a senior executive to identify the critical issues, design processes for addressing them, and appoint a single owner for each innovation initiative. Other senior leaders must avoid second-guessing or overturning the owner's decisions. It's fine to provide guidance and assistance, but if you don't like the results, change the initiative owner-don't incapacitate him or her. Focus on teams, not individuals. Studies by the MIT Center for Collective Intelligence and others show that although the intelligence of individuals affects team performance, the team's collective intelligence is even more important. It's also far easier to change. Agile teams use process facilitators to continually improve their collective intelligence-for example, by clarifying roles, teaching conflict resolution techniques, and ensuring that team members contribute equally. Shifting metrics from output and utilization rates (how busy people are) to business outcomes and team happiness (how valuable and engaged people are) also helps, as do recognition and reward systems that weight team results higher than individual efforts. Lead with questions, not orders. General George S. Patton Jr. famously advised leaders never to tell people how to do things: ""Tell them what to do, and they will surprise you with their ingenuity."" Rather than give orders, leaders in agile organizations learn to guide with questions, such as ""What do you recommend?"" and ""How could we test that?"" This management style helps functional experts grow into general managers, and it helps enterprise strategists and organizations evolve from silos battling for power and resources into collaborative cross-functional teams. Agile innovation has revolutionized the software industry, which has arguably undergone more rapid and profound change than any other area of business over the past 30 years. Now it is poised to transform nearly every other function in every industry. At this point, the greatest impediment is not the need for better methodologies, empirical evidence of significant benefits, or proof that agile can work outside IT. It is the behavior of executives. Those who learn to lead agile's extension into a broader range of business activities will accelerate profitable growth. A version of this article appeared in the May 2016 issue (pp.40-48, 50) of Harvard Business Review .",en,t i t l e
5,5,5,1464871461,VIEW,2857117417189640073,8759620187357735368,-1887985707808422181,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",SP,BR,CONTENT SHARED,-7255737497176527784,3609194402293569455,6147896666617046192,,,,HTML,http://epocanegocios.globo.com/Empresa/noticia/2016/06/siga-o-lider-ed108.html,title,"Aldemir Bendine (Petrobras) (Foto: Agência O Globo) Aldemir Bendine (Petrobras) Vão-se os anéis A Petrobras decidiu vender a fatia de 36% que possui na Braskem, o que vale cerca de R$ 5,8 bilhões. A estatal, comandada por Aldemir Bendine (foto), tem aproximadamente US$ 24 bilhões em dívidas a vencer neste ano e no próximo - e não gerou fluxo de caixa livre nos últimos oito anos. Não fosse tão ruim a situação, a Petrobras dificilmente abriria mão de uma companhia que: 1) tem enorme sinergia com a atividade da petrolífera; 2) tem o virtual monopólio do setor petroquímico; e 3) é, antes de tudo, um negócio rentável. O eventual comprador terá duas preocupações. A Braskem compra nafta da Petrobras, por um valor que considera alto. No atual aperto, essa política de preços deve continuar. Além disso, não se sabe até que ponto a Lava Jato avançará na Braskem, que tem como outro dono a Odebrecht. Ricardo Vescovi (samarco) (Foto: Folhapress) Ricardo Vescovi (Samarco) Pode sobrar para ele Ricardo Vescovi (foto), ex-presidente da Samarco, deixou o cargo para cuidar de sua defesa. Em janeiro, ele e mais sete funcionários da mineradora foram indiciados pela Polícia Federal por crime ambiental, após a queda da barragem de Fundão, em Mariana (MG). Dezessete pessoas morreram na tragédia. A companhia nega qualquer tipo de negligência. Um acordo judicial, para que a Samarco e suas controladoras (Vale e BHP) compensem os danos socioambientais, deve ser fechado este mês e está estimado em R$ 20 bilhões. O lucro anual da empresa mineira, antes do problema, girava em torno de R$ 3 bilhões. Reed Hastings (Netflix) (Foto: Picture Alliance) Reed Hastings (Netflix) Invasão em séries Em uma única investida, a Netflix, serviço de filmes e séries pela internet, passou a operar em 130 novos países, a partir de janeiro, chegando ao total de 190 - apenas a China, Coreia do Norte, Síria e a região da Crimeia não têm cobertura da empresa. ""Hoje, vocês estão testemunhando o nascimento de uma rede mundial de TV por internet"", disse Reed Hastings (foto), diretor executivo da marca, ao anunciar a megaexpansão. Mas não basta ""invadir"", é preciso ter munição para sustentar o ataque. Após o sucesso de produções como House of Cards e Narcos, a empresa planeja lançar mais 31 séries originais, além de 20 filmes e documentários próprios ainda este ano. Akio Toyoda (Toyota) (Foto: Zumapress) Akio Toyoda (Toyota) Mudança de pista Foi com humildade tipicamente japonesa que Akio Toyoda (foto), presidente da montadora Toyota, reconheceu a necessidade de uma correção de rota da empresa, em entrevista ao Wall Street Journal, durante o Salão de Detroit, em janeiro. ""Eu mudei a forma de pensar"", disse o executivo. ""Agora, acredito que faz sentido a Toyota participar na área de veículos autônomos, e nós temos os recursos para fazê-lo."" Sob o comando de Toyoda desde 2009, a companhia retomou a posição de maior vendedora global de veículos. A indústria automotiva teme que, em um eventual cenário de predomínio dos autônomos, a maior mordida dos lucros fique com as empresas que produzem softwares e tecnologias para esses carros - ou seja, que as montadoras se tornem algo parecido com as fábricas chinesas de celulares da Apple. Travis Kalanick (Uber) (Foto: Newscom) Travis Kalanick (Uber) Assim no céu como na terra O Uber firmou uma parceria com a Airbus para oferecer transporte de helicóptero pelo aplicativo. Os primeiros passageiros foram conduzidos durante o festival de cinema Sundance, em Utah, nos Estados Unidos, no fim de janeiro. As empresas afirmam que a intenção é criar um novo negócio que aumentaria a base de pessoas com acesso a uma aeronave desse tipo. O Uber, comandado por Travis Kalanick (foto), é uma empresa com voraz ímpeto expansionista, tanto do ponto de vista geográfico quanto no espectro de serviços. Não se sabe quando - ou se - o projeto, um piloto, virá ao Brasil. Mas vale observar que o mercado de transporte por helicóptero em São Paulo é um dos mais ativos do planeta, com cerca de 400 aeronaves em operação. Ao mesmo tempo, o Uber foi mordido no calcanhar: a GM investiu US$ 500 milhões em seu rival, o Lyft.",pt,t i t l e
6,6,6,1464356273,VIEW,5431399346444238856,22763587941636338,1852354987960602857,"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",SP,BR,CONTENT SHARED,5431399346444238856,22763587941636338,1852354987960602857,,,,HTML,http://techcrunch.com/2016/05/26/intel-buys-computer-vision-startup-itseez-to-improve-navigation-in-self-driving-cars/,title,"Intel has acquired computer vision and machine learning startup Itseez to develop better navigation for self-driving cars. The value of the deal was undisclosed. Founded in 2005 and based in San Francisco, Itseez makes computer vision algorithms and software. The company's products include a suite of algorithms for automobiles it calls ""advanced driver assistance systems,"" which allows car hardware to recognize pedestrians and traffic signs and warn about potential collisions. The acquisition of Itseez comes one month Intel announced the purchase of Yogitech , another Internet of Things-related company. Based in Italy, Yogitech works on functional safety for semiconductors (which means its tech makes sure the chips powering autonomous vehicles are working properly). Last year it also bought Lantiq, which makes chips for smart objects . Intel already makes chips, software, and a development kit for self-driving cars. In Intel's announcement, Doug Davis, Intel senior vice president and general manager of its Internet of Things Group (IOTG), said, ""Itseez will become a key ingredient for Intel's Internet of Things Group roadmap, and will help Intel's customers create innovative deep-learning-based [computer vision] applications like autonomous driving, digital security and surveillance, and industrial application."" Itseez has also developed algorithms for robotics, surveillance, smartphones, and sports analytics. The acquisition is part of Intel's strategic shift, which it announced last month , from PC chip maker to cloud computing, the Internet of Things, and analyzing data from those devices. Intel says its data center and Internet of Things businesses, which make up 40 percent of its total revenue, are already its ""primary growth engines,"" and have helped it weather a decline in the PC market by creating a total of $2.2 billion in revenue growth last year. But the restructuring has already come at a huge cost-Intel is laying off 12,000 employees , or 11 percent of its workforce. Intel CEO Brian Crzanich said the job cuts are part of Intel's ""restructuring to accelerate its transformation."" Featured Image: Jarous / Shutterstock",en,t i t l e
7,7,7,1467142693,VIEW,5795281877636738272,-1443636648652872475,1766918780078049973,Android - Native Mobile App,SP,BR,CONTENT SHARED,-3612149709424815327,-1352064057049251194,8046803147224074160,,,,HTML,"http://m.br.fashionmag.com/news/Netshoes-e-grande-vencedora-do-Premio-BR-Week-2016,708232.html",title,"A varejista de moda e artigos esportivos Netshoes foi a grande vencedora do Prêmio BR Week, o maior reconhecimento para o varejo brasileiro. A empresa foi considerada a Varejista do Ano entre as empresas de grande porte. Foto:Gustavo Cândido Além do maior reconhecimento da premiação, a organização venceu nas categorias E-commerce, Gestão Financeira e Varejo não listado em bolsa. Para a empresa, o reconhecimento é um sinal de que as atividades estão no caminho certo. ""É uma honra receber este prêmio, principalmente em um ano tão difícil no mercado brasileiro. Isso comprova que fazer um trabalho diferenciado, com foco no cliente e a busca pela melhor experiência e inovação trazem bons resultados para os negócios. É isso que queremos sempre com a Netshoes!"", declara Graciela Tanaka, COO da companhia. O Prêmio BRWeek marca a abertura do Brazilian Retail Week, maior evento de varejo do Brasil, que será realizado entre os dias 28 e 29, no Hotel Transamérica, em São Paulo. Para esta edição, o maior congresso do segmento traz o tema 'Varejo orientado a resultados'. Fonte: Portal NoVarejo",pt,t i t l e
8,8,8,1466005866,VIEW,8657408509986329668,-3196433790714486571,-6017930211969205504,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36",MG,BR,CONTENT SHARED,-3886927790136130174,-5380862725077089346,42993041282457315,,,,HTML,https://www.linkedin.com/pulse/three-cultures-continents-lessons-leadership-eric-dube,title,"Author: Eric M. Dube, Ph.D., Senior Vice President and Head, Global Respiratory Franchise, GSK We all know the standard 100-day leadership protocol - those first months are about setting the agenda, developing relationships and starting to inspire. Yet those halcyon days also provide another opportunity. To make mistakes - especially when confronted by a new set of cultural markers. When it comes to leadership, my travels have helped me understand that one size does not fit all. But it's more than that. Listening, watching and analysing are as crucial in those first 100 days as leading. Because a winning stratagem in one country might be your downfall in another. After leading GSK's oncology business and the Strategy and Planning function in the US, I was offered the chance to develop my skills and the respiratory business in Japan; I couldn't have been more thrilled. As someone who prided themselves on getting things done on time with a calm, determined confidence, I thought: 'Great, they're going to love me in Japan!' Yet I hadn't anticipated how daunting those first few months would become. Some of my Japanese colleagues viewed that way of results-driven way of working as too aggressively deadline-focused. In Japan, new leaders - especially outsiders - carry more influence if humility trumps overt demonstrations of confidence. Inevitably, subtleties were missed and cultural differences underestimated. But I learned. Fast. And the following two years were among the most rewarding of my working and personal life. The experience demonstrated the dangers of taking a preferred style of leadership and naively assuming it'll work in another milieu. Today, I sit in London as head of GSK's Global Respiratory Franchise, and reflect on how my colleagues in three vastly different environments have taught me an essential truth about leadership. In a globalised arena, successful strategies are built upon the kind of balance that often only comes from experiencing different cultures from the inside, with a fresh pair of eyes. Leaders need wisdom and honesty, too. I've been reminded of those attributes by the setting of this year's G7 Summit of world leaders in the beautiful city of Shima in Mie Prefecture. It's one of Japanese Prime Minister Shinzo Abe's favourite cities and every New Year he attends a special ceremony at the city's Ise Shrine, which is rumoured to house a sacred mirror, Yata no Kagami , representing wisdom or honesty, depending on who you read. Such workplace behaviours are universal. In Japan -as I learnt - workplace behaviours can come with added nuances that take time to adapt to. For instance, there is a more rigid hierarchical structure there in which business leaders are expected to make decisions. Of course collaboration is essential but decisions are solitary. It's known as Hou-Ren-Sou , each phonetic character representing three pillars - reporting, informing and consulting. Following those principles builds trust, strengthens relationships and empowers teams. I also came to rely upon another Japanese concept - Nemawashi - which loosely translates as binding the roots of a tree. Before any major decision is taken or change implemented, the advice of key people is sought and the feedback taken seriously. A leader can't lead without the team's input. Having travelled from one leadership extreme to another, I brought both sides to Europe, where American confidence and Japanese humility are wrapped up in British patience. Or impatient patience as I call it - the ability to get things done whilst never losing composure. Here, we assess problems before trying to solve them - the opposite of America's can-do, energetically-positive, clap-til-it-hurts approach. Which has its moments but we like to ration them in London! Here in the UK, leaders and their teams seek solutions with a methodical process - often at great speed - and yet still cognisant of change. There's an agile pragmatism that underlies our winning strategies. Striving to win, striving to collaborate and striving for solutions. Three cultures, three continents and three lessons - a learning process that is without end. And all these experiences helped me understand that, above all, we need to inspire teams' belief. In themselves, in their work and in the leader too. There was a time when a business would attempt to foster such belief by imposing its will and methodology in whatever country it operated in. Now, globalisation means that if companies and executives want to be catalysts for decision-making, they need to learn from within different markets. Because decisions aren't simply about getting things done. They're about trying to get into people's hearts, to understand, challenge and inspire them. And to do so with wisdom and honesty.",en,t i t l e
9,9,9,1466005348,VIEW,7943906961970828120,-4585796377251906117,7152528910203557048,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36",SP,BR,CONTENT SHARED,1592600391233958243,3609194402293569455,-5431306901276377931,,,,HTML,http://www.inc.com/jeff-haden/harvard-psychologist-says-this-trait-matters-most-10-ways-to-make-a-great-first-.html,title,"Say you meet a new potential customer, a potential employer, or anyone with whom you want to establish a business relationship . Which matters more: Showing that you're skilled, experienced, and capable, or Showing that you're trustworthy and likable? Many people assume that skill, expertise, experience, and competence matter most. After all, if you're going to hire me or do business with me, you need to know I have the talent to come through, right? It's natural to assume you should establish your credentials as quickly as possible. Natural, but wrong. According to Amy Cuddy, how people initially judge you has little to do with whether you seem skilled or competent. Instead, people subconsciously ask themselves one question when they first meet you: ""Can I trust you?"" According to Cuddy, trustworthiness (meaning warmth and likability) is everything. ""From an evolutionary perspective,"" she writes in her book , ""it is more crucial to our survival to know whether a person deserves our trust."" Her research shows that. Of course natural likability can also quickly lose its impact, especially when there's no substance beneath the surface glow. That's where talent comes in: Once you've shown you're trustworthy, then you can prove you're talented. In short, whip out your CV too soon and you may be wasting your time -- first you need to show that you're someone who can build and maintain great relationships, consistently influence (in a good way) the people around you, and make people feel better about themselves. Those are the kind of people we all like to be around, and want to be more like . So how do you do that? How do you come across as more likable and trustworthy -- in a genuine and authentic way? 1. Listen a lot more than you talk. Ask questions. Maintain eye contact. Smile. Frown. Nod. Respond -- not so much verbally, but nonverbally. That's all it takes to show the other person he or she is important. Then when you do speak, don't offer advice unless you're asked. Listening shows you care a lot more than offering advice does, because when you offer advice, in most cases, you make the conversation about you. Don't believe me? Who is ""Here's what I would do ..."" about: you or the other person? Only speak when you have something important to say -- and always define important as what matters to the other person, not to you. 2. Shift the spotlight to others. No one receives enough praise. No one. So start by telling people what they did well. Wait, you say you don't know what they did well? Shame on you -- it's your job to know. It's your job to find out ahead of time. Not only will people appreciate your praise, they'll appreciate the fact you care enough to pay attention to what they do. And then they'll feel a little more accomplished and a lot more important, and they'll love you for making them feel that way. 3. Never practice selective hearing. Some people -- I guarantee you know people like this -- are incapable of hearing anything said by someone they feel is somehow beneath them. Sure, you speak to them, but that particular falling tree doesn't make a sound in the forest, because there's no one actually listening. People who make a great first impression listen closely to everyone, and they make all of us, regardless of our position or social status or ""level,"" feel like we have something in common with them. Because we do. We're all human. Don't check your phone. Don't glance at your monitor. Don't focus on anything else, even for a moment. You can never connect with others if you're busy connecting with your stuff, too. Give the gift of your full attention. That's a gift few people give. That gift alone will make others want to be around you and remember you. 5. Give before you receive -- and assume you will never receive. Never think about what you can get. Focus on what you can provide. Giving is the only way to establish a real connection and relationship. Focus, even in part and even for a moment, on what you can get out of the other person, and you show that the only person who really matters is you. 6. Don't act self-important ... The only people who are impressed by your stuffy, pretentious, self-important self are other stuffy, pretentious, self-important people. The rest of us aren't impressed. We're irritated, put off, and uncomfortable. And we hate when you walk in the room. 7. ... Because you realize other people are more important. You already know what you know. You know your opinions. You know your perspectives and points of view. All that isn't important because it's already yours. You can't learn anything from yourself. But you don't know what other people know, and everyone, no matter who he or she is, knows things you don't know. That makes other people a lot more important than you -- because you can learn from them. The words you use impact the attitude of others. For example, you don't have to go to a meeting; you get to go meet with other people. You don't have to create a presentation for a new client; you get to share cool stuff with other people. You don't have to go to the gym; you get to work out and improve your health and fitness. You don't have to interview job candidates; you get to select a great person to join your team. We all want to associate with happy, enthusiastic, fulfilled people. The words you choose can help other people feel better about themselves -- and make you feel better about yourself, too. 9. Don't discuss the failings of others ... Granted, we all like hearing a little gossip. We all like hearing a little dirt. The problem is, we don't necessarily like -- and we definitely don't respect -- the people who dish that dirt. Don't laugh at other people. When you do, the people around you wonder if you sometimes laugh at them. 10. ... But readily admit your own failings. Incredibly successful people are often assumed to have charisma simply because they're successful. Their success seems to create a halo effect, almost like a glow. The key word is seem. You don't have to be incredibly successful to make a great first impression. Scratch the shiny surface, and many successful people have all the charisma of a rock. But you do have to be incredibly genuine to be remarkably charismatic. Be humble. Share your screwups. Admit your mistakes. Be the cautionary tale. And laugh at yourself. While you should never laugh at other people, you should always laugh at yourself. People won't laugh at you. People will laugh with you. They'll like you better for it -- and they'll want to be around you a lot more.",en,t i t l e
10,10,10,1462545003,VIEW,8295457724580096419,-108842214936804958,6734056951662293770,"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36",SP,BR,CONTENT SHARED,8295457724580096419,-108842214936804958,6734056951662293770,,,,HTML,http://themacro.com/articles/2016/05/the-startup-zeitgeist/,title,"Reading applications to Y Combinator is like having access to a crystal ball. Twice per year - once in the winter and once in the spring - thousands of men and women apply to Y Combinator. Each of these bright minds has his or her own vision of the future of technology. They pitch ideas related to Bitcoin, drones, new drugs, virtual reality, and nearly every other topic you could imagine. Since 2008, we've received tens of thousands of these applications. Collectively, they provide insights into the ideas smart people are working on and how it's changed over time. We've never talked about these publicly before. But recently, we commissioned Priceonomics (YC W12) and their data studio to analyze eight years' worth of our anonymized application data. After breaking the applications down into keywords, they calculated the percentage of applicants that mentioned any given term. So let's review the data, starting with a simple example. There's a question on the Y Combinator application ""Who are your competitors? Who are you most afraid of?"". Looking at the answers to this question, we can see what companies founders have on their minds. When Twitter was new and rapidly growing in 2010, there were many startups doing Twitter-like apps and tools for Twitter users, who were appropriately concerned that Twitter might compete with them. Very few applications mention Microsoft - Paul Graham has written about why that may be before. Some startups are now making the top lists of competitors too. Uber and Airbnb are more than halfway to Google by number of mentions. Other companies have completely dropped off the grid. Remember MySpace? The rest of these graphs are based on the answer to the question ""What is your company going to make?"". Let's look at what this can tell about the platform shift from websites to apps. While the trend in this graph is old news, it's not obvious that it would take until 2016 for apps to overtake websites. Within mobile devices, the iPad was mentioned specifically very often after it first came out. Now it's mentioned rarely-probably not because people don't build apps for iPads anymore, but instead because it's simply so obvious that you will support iPads that people don't even mention it. Interest in the Kindle was never very strong. In the early days of Y Combinator, founders often pitched free and ad-supported business models. Throughout the startup world, that business model has become less common, replaced with companies charging customers directly. We always suspected this, and you can see it in this graph. The term ""SaaS"" (Software-as-a-Service, aka, people pay for it) has increased in usage by 400% since 2008, while ""Advertising"" has decreased by more than 60%. Startups related to blogging used to be very fashionable - many applications suggested tools for bloggers, better blogging sites, or search engines for blogs. This space is no longer popular. There are still a lot of ideas aimed at improving or disrupting email, but not as many as there used to be. Messaging is now more popular. Buried in the above chart is the exploding popularity of the messaging service, Slack. Let's take a closer look at Slack's ascension by comparing it to the number of applications that mention other popular enterprise terms like ""GitHub"" and ""Docker"": Many startups believe that Slack has created an unmatched distribution opportunity. The interest in Slack-related concepts, mostly bots and concierge services, has exploded in the last year. Next, let's take a look at how has Bitcoin fared over the years. Bitcoin-related ideas were briefly very popular, but fell off rapidly. These days, building things on top of the underlying blockchain is on the rise, and seems set to surpass bitcoin itself. Hardware and biotech are all increasingly popular. Some of this reflects changes in the mix of startups applying to Y Combinator. Y Combinator originally focused on software companies but in the last few years has expanded to fund companies in every space. The rest of it reflects the overall hardware renaissance , and the surge of interest in biotech now that lab work is so much more accessible to startups. Within hardware, smartwatches and other wearables remain popular, though they have plateaued now. Other hardware items have not fared as well. Mentions of tablets and e-readers have sharply declined in YC applications in recent years. Not surprisingly, VR is hot and getting hotter. We recently tweeted a call for more VR applications and got a great response. But the biggest trend in the last couple of batches has been the surge in interest in applying AI to everything. Even these graphs understate the extent to which AI is now playing a role in many companies' ideas. To conclude, we've compiled many of the more popular terms mentioned in this post on one table, where you can compare them with one another. This list ranks terms by the percentage of applications that mention them. All companies mentioned have been highlighted in orange for reference. Though on the decline, Facebook (4.2%) and Google (4%) are still the most-cited companies in YC applications. Newcomers - particularly Uber (2.6%) and Airbnb (2.1%), and Slack (1.1%) - are rapidly on the rise. What this table doesn't show us is which terms are on the rise or declining. So lastly, we've broken down the technologies and companies that are losing favor with applicants, as well as those which are ascending the fastest. We limited this list to terms that were mentioned in at least 0.5% of all 2016 applications (and rounded each figure to the nearest tenth of a percent). As we touched on, the term Bitcoin has not fared well in YC application mentions over the past year - to the tune of a 61% decline in mentions. Also of note, Bluetooth, Crowdfunding, and Websites are in similar decline. Of every term we included in this article, one stood far above the rest in terms of popularity: Slack. Over the past year, the company has experienced an 850% increase in YC application mentions. We think this data is pretty interesting, and we plan to track it more closely. If you have other insights on how to interpret it or ideas for questions we can look at, let us know in the comments on Hacker News. Special thanks to Priceonomics for providing the analysis behind this post. Companies that want to turn their data into content can learn more about working with the Priceonomics Data Studio .",en,t i t l e
11,11,11,1467296491,VIEW,-8277924497842156608,-8550167523008133722,-8708614381189222302,,,,CONTENT SHARED,2267321579404324900,881856221521045800,-1609125166981192463,,,,HTML,https://developer.ibm.com/bluemix/2016/02/01/migrating-from-parse-to-bluemix/,title,"This week Parse.com , Facebook's Mobile Backend as a Service offering, shocked both their customers and the development community by announcing that they are sunsetting the service to ""focus resources elsewhere."" Luckily, they're not leaving current customers high and dry - they are giving developers a year's notice before the service is shut down, providing data migration tools to MongoDB , and open-sourcing parse-server , a Parse.com API-compatible router package for Express.js on top of Node.js. If you're a Parse customer looking to move your app infrastructure to someplace secure, then you're in luck. Bluemix is the place for you. In this post, I spell out the process of migrating an application from Parse.com to Bluemix. Let's get started! Create your Parse-on-Bluemix application The first thing you need to do is create an app on Bluemix . If you don't already have a Bluemix account, you can sign up here (it's free to try!). Once you're logged in, it's time to create a new Node.js app on Bluemix to host the Parse server. Click the CREATE APP button on your dashboard. Then, when prompted, select the WEB application option. This doesn't mean that you can't connect a mobile app to it; this option just sets up the backend application server, without provisioning any Bluemix mobile services like Mobile Client Access . The web option is used to deliver REST API calls, but does not support any enhanced mobile security or analytics features. Next you need to specify the type of application you want to create. Bluemix supports a variety of server-side processing options; in this case you want to select ""SDK for Node.js"" and then CONTINUE. Next you are prompted to enter an application name. Go ahead and enter one. (Application names must be unique across Bluemix.) When you click FINISH, the app is staged, and you are presented with instructions and next steps. At this point, click ""Overview"" to go back to the app's dashboard. Add the MongoDB service to your Bluemix application The next step is to create a MongoDB instance to migrate the data from Parse.com. From the app's dashboard select ADD A SERVICE OR API. Scroll down to the ""Data and Analytics"" section and select ""MongoDB by Compose"" to add a MongoDB instance to your application. You are then presented with details for configuring a MongoDB instance. Open up a new browser window for the next step - leave Bluemix open, because you're going to need to come back here to finalize the MongoDB configuration. Create and configure the MongoDB instance on Compose.io The MongoDB instance on Bluemix is available through Compose.io, a recent IBM acquisition. To create and configure the MongoDB instance, click on this Compose link and navigate to compose.io. If you don't already have a Compose account, you need to create one (they're free for 30 days!). Once you're logged in, click on the deployments icon (top icon on the left side) and select the MongoDB option to create a new MongoDB deployment. You need to specify a deployment name and region, then click ""Add deployment"" to create the MongoDB instance. For this example I created a deployment called ""parse-migration"". Next you need to create a database instance. Once the deployment is created, click on ""Add Database"" and create a new database. In this sample I created a database called ""myDatabase"". Once the database is created, you need to add a user account to access the database. On the database screen, select the ""Users"" menu option on the left side, and then click ""Add User"" to create a new user. Next click on the ""Admin"" (gear) link on the left side to view the connection info for your database instance - you're going to need this in the next step. Go back to the Bluemix MongoDB screen and specify the MongoDB host string, port, and login credentials, then click CREATE to finalize the MongoDB configuration within your Bluemix app. The host string is in this format: For this sample app, it is: The port is 10373 , and the username and password are the ones for the account that was just created. Migrating data from Parse.com to your MongoDB instance At this point you're ready to migrate data out of Parse.com, and into the MongoDB instance you just created. Detailed instructions are available in the Parse.com migration guide . Log into Parse.com and select the app that you want to migrate. Go into ""App Settings"", then select ""General"", and click the ""Migrate"" button to begin the process. Note: You must be in the new/beta view to see this option. To begin the migration process, a modal dialog asks you to specify your database connection string. The connection string is in the format: So, in the example app, it is: Click ""Begin the migration"". In a few minutes the migration will complete, and you can return to your MongoDB database on Compose.io to see the migrated data. Note: Migration times vary depending upon the amount of data you need to migrate. Configuring your Bluemix application Next, let's configure some environment variables to use in the Node.js application. On the Bluemix app's dashboard select the ""Environment Variables"" option on the left menu, then select USER-DEFINED. Add environment variables for APP_ID , MASTER_KEY , and REST_KEY that correspond with the App Keys from Parse.com. Also add a PARSE_MOUNT key that contains the path where the services will be exposed on Node.js. For this last one, just use the value /parse . On Parse.com, you can access the ID and Key values by going to the app, selecting ""App Settings"", and then selecting ""Security & Keys"". Save these environment variables. Now we're ready to deploy the Node.js application. Deploy your Bluemix application The parse-server API is a router for Express.js (an application framework for Node.js). It can be easily leveraged in a new Node.js/Express.js app, or dropped into an existing Express.js app to expose the Parse.com API. There is a sample application in the parse-server repository that you can copy to get started. Or, you can take the easy route. IBM Cloud Data Services Developer Advocate Mike Elsmore has put together a base Node.js application that can be quickly deployed that already supports the Bluemix environment configuration. You can click the ""Deploy to Bluemix"" button below to deploy this project directly to Bluemix in a single click, or head over to github.com/ibm-cds-labs/parse-on-bluemix to view the source code. If you want to deploy the application manually, then clone it to your local machine and use the Cloud Foundry API cf push command to push it to Bluemix. You application will be deployed and staged, and it's now ready for consumption. Testing the deployment You should now test the deployment using curl commands from the command line to verify that the migration and deployment were successful. Note: the actual URL depends on your data model. If things were successful, you should see data returned from your parse server instance: Or you can post data to the server to test write ability: What Next? If you are using Parse Cloud Code, then you can copy your Cloud Code files into the Node.js project. (See the ""cloud"" directory in the git project.) For additional details, be sure to check Parse.com's migration guide. Configure the client apps Once you've stood up the new back-end system for your app(s), you're ready to point the mobile client applications to the new back-end infrastructure. The most recent version of the Parse.com SDK introduced the ability to change the server URL (at least version 1.12 for iOS, 1.13.0 for Android, 1.6.14 for JS, 1.7.0 for .NET). Limitations and warnings Parse.com has done a great job providing you with tools to migrate your apps off their platform, but be warned - not all features of the Parse.com platform are available in the open-source parse-server. Push notifications are not implemented. Luckily, the push notification implementation can be modified to support IBM Bluemix's Push notification service , so your app does not have to suffer loss of functionality. In addition, Parse.com's App Links do not have a direct replacement in the parse-server. Many of these offerings have separate Node.js npm modules that can be leveraged, but each requires additional development effort; they are not drop-in ready. App settings are impacted by this transition. This includes social logins, user authentication and sessions. App analytics, the client dashboard, in-app purchases, and jobs are also not supported. Luckily, the Bluemix catalog has many of these features covered, plus a whole lot more. If you run into any cases where the parse-server seems to just ""do nothing"", meaning services don't seem to exist or they fail silently, then double-check your PARSE_MOUNT environment variable and MongoDB connection/host string to make sure they are in the proper formats mentioned above. For more details on transitioning away from Parse.com, be sure to read the sunset announcement , the database migration tool , and the parse-server migration guide .",en,t i t l e
12,12,12,1459340748,VIEW,809601605585939618,-5070718731712624222,-2459579398090328729,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36",SP,BR,CONTENT SHARED,8742078838645536785,-1032019229384696495,-1858408872346331823,,,,HTML,http://www.engadget.com/2016/03/29/behind-facebook-messengers-plan-to-be-an-app-platform/,title,"The question is: Why? Why would you as a user want all this integration? Why not just download Uber and request a car that way? Meanwhile, why would a developer or a business want to bake their services into Messenger? Wouldn't they rather users get their apps instead? Lastly, why does Facebook want to add all of these features anyway, and potentially weigh it down with so many added complications? There are several answers to these questions, but it all starts with a single fact: Messaging is now the number one activity most people do on their smartphones. A Pew Internet study published last year found that fully 97 percent of smartphone owners used text messaging at least once a week. Messaging was also found to be the most frequently used feature, with smartphone owners reporting that they used text messaging within the past hour. Further, 35 percent of smartphone users in the US use some kind of messaging app to communicate. Facebook's own stats confirm that. In the last quarter of 2015 , the company reported 900 million monthly Whatsapp users and 800 million monthly Messenger users. ""We have seen messaging volume more than double in the past year,"" said Frerk-Malte Feller to Engadget. Feller is a Director of Product Management for Facebook who heads up Messenger's business initiatives. ""Businesses want to be where the people are."" This is certainly why Lyft wants to be involved. ""As the heart of so many of our users' day-to-day communications, [Messenger] felt like a natural fit to make getting from place to place as simple as typing 'hello' to a friend,"" a Lyft spokesperson told Engadget. From the user standpoint, having a third-party service like Uber integrated into Messenger bypasses the whole rigmarole of signing up for an account. ""You're already registered on Messenger using your Facebook identity,"" said Feller. ""When you start using a new service, you don't have to fill out all those forms [...] You can just use the identity you have on Messenger."" More importantly, however, it also means one less app to download. Sure, downloading an app sounds like a pretty trivial activity, but it's still an extra step, one which a lot of users are unwilling to take. A recent Nielsen study showed that despite the increased number of apps in both Google Play and Apple's App Store over the past few years, people still generally use the same number of apps -- about 26.7 per month. But while the total number of applications doesn't seem to have increased, the amount of time spent on them has gone up -- about a 63 percent rise in two years. We're not as interested in trying new apps, but the apps we do have, we're using more. This means we're not as interested in trying new apps, but the apps we do have, we're using more. It's a scenario that's ripe for enriching existing apps -- like the heavily used Messenger -- with additional features. As for businesses, it's a chance to increase awareness without having to rely on app downloads. Beyond that, Messenger offers a valuable social component that most existing apps don't have. With the Uber integration, for example, you can message an address to a friend, who can then tap that address to request a car. Alternately, if you're already in an Uber, you can use Messenger to share your location to a friend so he or she can see when you're going to arrive. All of this is on top of the ability for you to directly message the company if you're having any issues. And because this is Messenger and not an email or a phone call, whoever's reading your messages will be able to see past conversations to gain context of the existing message thread. The kinds of interactions are richer too. Spotify's integration, for example, offers a more seamless sharing experience than just copying and pasting a link. ""It's a huge upgrade,"" a Spotify spokesperson told us. ""[It allows] users to deep link into Spotify to consume content."" There is some precedent to all of this. Mobile messaging apps in Asia have been experimenting with these added features for a while now. Line , for example, has billed itself as a ""social entertainment platform,"" and has branched out into offering a music service plus a news feed, both of which are easily accessible from within the main messaging app. It also offers games, much like Messenger is currently doing , and is even going so far as becoming a phone carrier . Of course, adding third-party services is just the beginning; Messenger's ambitions go much deeper. As a recent report from The Information indicates , Facebook's chat app could soon have plenty of other features like calendar syncing, News Feed-style status updates and the ability to directly share quotes from articles. Add the M personal assistant to the equation, and it's easy to imagine a future where Messenger could be the central hub of smartphones everywhere. Perhaps even more so than Facebook itself. There is one potential downside, however, and that's the arrival of advertising . After all, that's Facebook's bread and butter, and it's naturally going to want to slap ads on an app that's getting to be this popular. And with all these business partnerships, it won't be surprising if Facebook ends up allowing companies to spam you with the occasional advertisement, especially if you voluntarily added these integrations yourself. ""The feedback from people in the last 12 months have been strong,"" said Feller. ""It really has all the right attributes and characteristics."" And with F8's annual developer conference coming up next week, we imagine there will be even more to come.",en,t i t l e
13,13,13,1467307915,VIEW,7544768317373280661,-2979881261169775358,2590258191005042236,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2784.1 Safari/537.36",MG,BR,CONTENT SHARED,-1124738136890721085,7703284633155187943,3321055793810076403,,,,HTML,http://blog.ionic.io/a-baseline-for-hybrid-mobile-developers/,title,"I've been presenting on hybrid mobile development for almost five years now. As a web developer, I found the opportunities of hybrid development to be incredibly exciting. All of a sudden, I could take the tools I had been using for over a decade and deploy applications in the mobile space. Like others, I quickly discovered that developing good mobile applications required more skills, experience, and work, of course, but overall, I was excited about taking web standards and applying them to apps. Generally, when I present on hybrid mobile development, whether it be Apache Cordova or Ionic, I begin by talking about the prerequisites. When it comes to ""web knowledge"", I pretty much just leave it that. I assume that if you're interested in learning about hybrid mobile development that you already have some experience with the web. But that's not necessarily the case. Recently, I was helping someone out with a Cordova issue and recommended that they ""simply"" use Ajax to load in some data. Turned out the person had no idea what Ajax was or even how to begin making use of it. This got me to thinking about what level of knowledge would be recommended for people looking to do hybrid mobile development (whether or not they use Ionic, but of course, they should use Ionic). What follows is a set of baseline skills that I'd consider to be required, or highly recommended, before beginning hybrid mobile development. Obviously, this will be a matter of opinion, and I highly encourage people to add to this list in the comments below. 1. HTML I don't know if one can say they have ""learned"" HTML when browsers have begun to innovate almost every month. I'll say I began learning HTML back around '93 or so. I can remember when bgcolor was added to the body tag (this was a ""Big Deal"" back then). I've got twenty plus years of HTML knowledge, and you know what? I still don't know everything. A while ago I ""discovered"" the cite attribute of the blockquote tag. This wasn't new, of course, but I hadn't run into it before. So my point here is, even if you already know HTML, it may make sense to spend some time looking over the guides and just refreshing your skill set. If you are starting from scratch, you'll want to begin with the excellent Mozilla Developer Networks' Introduction to HTML . If you know the basics, then check out the Mozilla Developer Network HTML reference to see if there are tags you don't recognize. All of this can be done in a day, but at a bare minimum, here are the parts of HTML I think will be most important to you. Forms: Since applications require interactivity, and forms create the basic mechanisms by which users interact with web pages, knowing how to build a form and create controls is essential. As for actually working with that data, we'll get to that later on this in article. Structural tags: By this I mean things like div, ul, p, and others I'm probably forgetting. A lot of my JavaScript will interact with these items, either adding to or changing their contents, so understanding these 'block' style tags and how you can use them will be important. One final point regarding HTML. Most people go into web development thinking ""HTML for structure, CSS for design, JavaScript for interactivity"", and that's mostly true, but not entirely. If you've ver used collapsible blocks in things like jQuery Mobile or jQuery UI, you may not know that HTML supports something similar with the details/summary tag pair. It's an interactive set of tags that don't require JavaScript at all. You can also do basic form validation all in HTML, too, without a lick of JavaScript. I think people who have been doing web development for a long time may forget this and not consider an HTML solution instead of JavaScript. 2. CSS I've had a love/hate relationship with CSS. While it is fun to laugh about being a developer with poor design skills, there is no excuse for not understanding how CSS works. Yes, you may not be able to determine what color goes with that. That's obviously something a designer can help with. But you should understand how CSS works with HTML and how to specify layout properties to your elements. The good news is that, once again, Mozilla Developer Network comes to the rescue: Introduction to CSS . As before, I'll recommend the introduction I just linked to and their CSS reference for people who know the basics but want to review what's possible. So what's the minimum? You should be able to add a style sheet to a HTML page. That's relatively simple, but know how to do it. You should know how to use selectors to specify what parts of your app you're modifying with CSS. This will also be helpful for your JavaScript skills, since you'll often be doing selectors there, too. Understand how to set the color, size, and margins for items. Again, don't necessarily be worried about knowing what's ""best"" for these settings, but being able to do basic tweaks here will help until you get a real design in play. As an example, I'll often use basic sizing attributes for a button on my mobile apps to make them easier to 'hit'. My button may still be ugly, but I can at least use it more easily while testing. Understand CSS layout, specifically how CSS can be used to layout a web app. This one I still struggle with. Hell, I have to Google every time I want to center something. (Ok, I'll admit it-I miss the <center> tag.) While I struggle with this area, I know it's ""possible"", and that at least gives me enough information to Google a solution. Obviously, something like Ionic will help cover a lot of your design issues, and that's good, but you really want to have basic CSS skills in your tool belt, anyway. As it stands, most clients are going to want a custom design, anyway, meaning that the ""out of the box"" Ionic look will only be acceptable during prototyping. And much as I ended the HTML section above, I'll also point out that CSS can be ""interactive"", as well. When I began web development, I built a crap-ton of ""roll over menus""-these were menus that would highlight as you moved your mouse over them. But now we have CSS properties that can do the same thing. And of course, there's also a whole set of animations you can do with CSS. 3. JavaScript Ah, the ""big one"". Most (but not all-see both the HTML and CSS section above) interactivity in a web app comes from JavaScript. Of the three main tiers of web development, JavaScript is perhaps the most complex and hardest to pick up. I've been using JavaScript since it was released, and frankly, I think I'll need another ten years or so before I consider myself an expert. Don't be scared by this. For most of us, we won't be building huge complex apps like GMail. You can, and should, start with simple operations. As before, Mozilla is here to help us: JavaScript Guide . So what should you know before starting hybrid mobile development? Understand how JavaScript works with the DOM. Yes, jQuery makes this incredibly easy, but at least understand what jQuery is doing behind the scenes. You want to know how you can read and write the contents of a form field. You want to know how to change the contents of a div tag. When I began web development and was using JavaScript, this was the vast majority of what I did. Understand how to do Ajax requests. Again, jQuery hides some of the complexity here, but you should have a basic understanding of XHR (the technical bits of Ajax) and how to do network requests. As most hybrid mobile apps are single page apps, Ajax is the primary means of communication with servers and is crucial. This is the big one-understanding how to work with asynchronous calls. You absolutely must understand this concept. I think many of us more experienced folks forget just how plain weird this is at first. When learning a scripting language, you just naturally expect that x=foo() will just always work. If you already know the basics, I'll humbly recommend my article, Leveling Up Your JavaScript , which discusses how to go from ""Beginner"" to ""Intermediate."" I felt this article needed to be written because many of the JavaScript things you'll see online can be overly complex or not necessarily practical. I get that it's cool to use JavaScripts to control robots. I get it. However, for a developer struggling to get stuff done, it isn't necessarily helpful. 4. The Rest OK, so you aren't done yet. Here are a few more things I'd suggest. Know that browsers support debugging. If you write to me saying that ""so and so isn't working"", I always reply by asking what you saw in your browser's developer tools. All modern browsers support developer tools, and they contain a huge amount of functionality. You don't need to learn them completely on your first day, but know they exist, how to access them, and where to find the docs. While I linked to Mozilla Developer Network above, also consider CanIUse.com for a quick way to see if browser X supports feature Y. There's a lot of different editors for working with web pages and hybrid mobile apps. The best one is the one you like the most. Don't listen to anyone else's opinion on this. Except mine. Use Visual Studio Code .",en,t i t l e
14,14,14,1467898983,VIEW,-5912792039759735631,9102085903669288476,5663412128964511596,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",SP,BR,CONTENT SHARED,-4336355219396419841,3609194402293569455,6238714338270815946,,,,HTML,https://endeavor.org.br/game-of-thrones-lideranca/,title,"Se você é um grande fã de Game Of Thrones, cuidado! O inverno chegou e trouxe com ele muitos spoilers. Todo domingo à noite, na sua timeline do Facebook, alguma referência aparece sobre a última reviravolta na disputa pela soberania dos Sete Reinos. Se você não acompanha Game of Thrones, lamento por isso. Mas se você é fã que nem eu, já deve ter refletido sobre as lições dessa grande série para nossa carreira empreendedora. Deixando milhares de expectadores colados na TV por uma hora seguida, na semana passada terminou a sexta temporada de Game Of Thrones. A temporada foi recheada de reviravoltas e chegou ao fim trazendo várias definições e, principalmente, reduzindo bastante o caminho que leva a reta final da grande disputa. Neste momento, salvo eventuais surpresas, temos três grandes candidatos ao trono de ferro: Cersei Lannister, Jon Snow e Daenerys Targaryien . São três grandes candidatos. Todos chegam à reta final pelos seus próprios méritos, tendo sido testados exaustivamente em batalha. A briga vai ser duríssima. Cada um dos três candidatos tem um estilo completamente diferente e analisar suas virtudes e trajetória pode nos ensinar bastante sobre o que realmente faz diferença na busca pela liderança em um cenário turbulento e adverso como o do seriado. Cersei só agora assume o papel de protagonista, depois de anos na posição de coadjuvante. Visceral e calculista, é a mais inteligente dos três e a melhor articulada politicamente - Maquiavel teria muito orgulho dela. Assim como seu pai, Cersei sonhava em colocar um filho no trono e comandar das sombras, mas nenhum deles estava à altura. Nesta etapa ela vai ter que assumir o protagonismo com tudo de bom e ruim que isso significa: O poder está em sua mão, mas o alvo passa a estar pregado em suas costas. Cersei nos ensina algo essencial: 1. Protagonismo não é de graça Não dá para liderar da posição #2 e assumir a posição #1 tem um preço. Ter o poder em suas mãos traz uma grande responsabilidade junto . Até agora todas as suas decisões e maquinações eram freadas pelo fato de que a caneta sempre estava na mão de outra pessoa, a qual pagaria o preço pelo eventual erro. Muitos sofreram em suas mãos e ela sofreu bastante também pelos limites desse jogo. Agora que está sentada no trono será divertido ver como se vira com a inversão do jogo político e com as dívidas que assumiu para chegar onde está. 2. Não tenha medo de ser quem você é Apenas quando ela se liberta das opiniões dos outros e assume inteiramente suas idiossincrasias é que ela assume o trono. Cada pessoa é diferente. O caminho de cada um é diferente. Jon Snow, agora já conhecido como Jon Stark, é um líder que percorreu o caminho do herói pelos próprios pés. Comeu o pão que o diabo amassou na Patrulha da Noite e nas terras ao norte da muralha, ganhou o respeito dos seus liderados por sua habilidade em combate e por sua integridade moral, morreu e renasceu, o que nem foi uma grande adição ao seu currículo impressionante. Galvanizou o norte e agora se apresenta irretocável como opção ao trono. Até a questão do sangue impuro já se resolveu! Jon também tem grandes ensinamentos para nos dar: 3. Reputação vale ouro Jon é irretocável moralmente. Seus homens o amam por isso e seus inimigos o respeitam. Aliás, nunca vi ninguém converter inimigos em aliados como ele . Sua retidão e seu desapego pelo poder o tornam um líder poderoso que as pessoas respeitam e seguem pelos cenários mais absurdos. 4.Decisões ancoradas em valores são sempre boas decisões Jon chega até aqui, apesar de todos os riscos que correu e dos erros que cometeu, porque sempre tomou decisões baseadas em valores que as pessoas podiam reconhecer e admirar . Mesmo quando erra não perde a admiração de seus liderados, já que eles entendem o porquê de cada decisão. 5. Hesitação pode ser fatal Jon é lento para decidir e costuma hesitar em momentos chave da história. Muita gente sofreu e muita gente morreu por conta disto. Na verdade, ele mesmo literalmente morreu por resistir em tomar decisões difíceis em relação a pessoas. Ainda bem que Melisandre estava por perto... 6. Você precisa de aliados que compensem suas fraquezas A capacidade de Jon de trazer pessoas brilhantes para seu lado é impressionante. E ele é sábio em reconhecê-las e deixá-las trabalhar. Ao longo do caminho foram várias - Samwell, Tormund, Davos, Sansa e agora a sensacional Lyanna Mormont. Um verdadeiro dream team! E não vamos esquecer da Daenerys, a mãe dos dragões. C ertamente a candidata mais poderosa ao trono. Além do direito natural ao título, o que torna sua posição forte por natureza, Daenerys reúne um conjunto potente de predicados. Assim como Jon, teve que percorrer o caminho do herói e se afirmar como líder em um cenário que privilegia os homens. Assim como Cersei percebeu que seu caminho para o poder estava em assumir o protagonismo e assim como Jon se cercou de gente boa ao seu lado. E ainda tem três dragões! Só não leva se fizer algum erro muito grande. Daenerys é um belo personagem e tem também a nos ensinar: 7. Potencia sem estratégia não é nada Até a chegada de Tyrion, o anão que nasceu para ser conselheiro de reis, Daenerys andava em círculos, ora avançando com ferocidade, ora se perdendo em seus erros. Apenas com a chegada do estrategista , que ela teve a sabedoria de acolher, é que seus esforços triunfam e que ela consegue finalmente se organizar para a batalha final. 8. Símbolos são importantes Ninguém soube usar melhor sua trajetória para criar uma aura de vencedora - mãe dos dragões, nascida do fogo, libertadora dos escravos - Daenerys construiu uma imagem que a torna irresistível na batalha de Relações Públicas. Apenas Jon Snow tem alguma chance ao disputar com ela os corações e mentes do povo. Cersei quase morreu por subestimar a importância disto. 9. Se você tem três dragões, use-os! Apenas quando Daenerys usa seu poder sem restrições, soltando os bichos sobre a frota dos senhores escravistas, é que ela afirma de fato sua condição de candidata ao trono dos sete reinos. O poder traz responsabilidade, mas não o usar é infantilidade. Assim como nas empresas, é fácil perceber nesses personagens a importância que um líder tem. Sem liderança não dá para executar uma estratégia. Aliás, sem liderança não há estratégia. Sem liderança, não há um porquê . Há apenas como e o quê . Sem liderança, não há mudança, não há o novo. Há apenas a repetição do antigo. Os líderes são os responsáveis por alinhar os esforços, engajar as pessoas, fazer as partes cooperarem entre si. Quanto mais complexo o sistema, maior a importância da liderança. E os líderes são os responsáveis por manter a motivação qualquer que seja o cenário. O líder energiza, faz mover. Pela fala, pela ação, pelo exemplo. Um último aprendizado , que é meio óbvio, mas que vale a pena ser registrado, é: 10 . Para ganhar, tem que jogar Apenas na hora que você se assume como líder e se propõe a ser o protagonista de grandes conquistas é que você tem a chance de ganhar. Ninguém vai te dar o trono de graça, você vai ter que lutar por ele! Esses três, cada um a seu modo, serão os protagonistas da próxima temporada que eu e milhões de pessoas pelo mundo estão esperando ansiosamente. É muito prazeroso ver grandes líderes em ação, na vida real ou na ficção. E sempre dá para aprender alguma coisa! Se você também está em uma batalha pela liderança, e agora entendeu como ela é fundamental para o sucesso do seu negócio, aproveite enquanto espera pela sétima temporada para fazer o Curso Liderança: Desenvolvendo Times de Alta Performance , 100% online e gratuito que acabei de lançar em parceria com a Endeavor e SEBRAE. Leia também: Liderança: tudo para inspirar seu time a ter cabeça de dono 3 mitos sobre liderança que atrapalham o empreendedor O que nos faria líderes admirados e eficazes como Alexandre, o Grande?",pt,t i t l e
15,15,15,1462811069,COMMENT CREATED,5979676385148714519,-1443636648652872475,2820567810769562832,,,,CONTENT SHARED,-5037827401452845772,5683029675627635125,-4824397180889193568,,,,HTML,http://tableless.com.br/quando-o-scrum-ira-falhar/,title,"por marcoaacoliveira Nesse artigo vamos abordar um pouco os pontos críticos do Scrum, a intenção aqui não é explicar o framework (o Scrum é considerado um framework para gestão de projetos) em si, mas dar um panorama dos casos mais comuns de falhas críticas ao se tentar adotar o Scrum ou modificá-lo. Caso esteja procurando um artigo para entender melhor o que é o Scrum, recomendo esse aqui , escrito pela Dani Guerrato. Ou ainda, caso queira mergulhar de cabeça recomendo a leitura do Scrum Guide (em português). Introdução feita, vamos ao que realmente interessa aqui: O Scrum não é uma bala de prata (a essa altura você já deve saber que nenhuma metodologia ágil é). Se você, assim como eu, já foi (ou é) responsável por trazê-lo para sua empresa, esteja atento ao seu ambiente e aprenda com a implementação do Scrum. Citarei aqui e explicarei sobre cada um dos pontos críticos do Scrum: Quando a comunicação não é suficiente Esse talvez seja o mais óbvio ponto crítico do Scrum. Em qualquer projeto, a comunicação se faz necessária, mas diferente de outras metodologias de gerenciamento de projeto, o Scrum delega a responsabilidade do gerenciamento à própria equipe de desenvolvimento e daí a comunicação se torna ainda mais crítica. Como uma equipe pode chegar a um consenso e se autogerenciar se não há uma boa (ou nenhuma) comunicação? Sem comunicação, não há gerenciamento. Portanto Scrum Master (ou não), fique atento a esse ponto, ao perceber pequenos atritos não resolvidos, desgaste ou qualquer sinal de que a comunicação do time de desenvolvimento, Product Owner ou até mesmo a sua, não esta indo bem. Trabalhe em cima disso. Existe um artefato que tem como objetivo garantir uma comunicação mais fluída e um gerenciamento mais democrático e dinâmico: Planning Poker. Nele todos os membros da equipe de desenvolvimento jogam cartas para determinar o peso de cada estória de usuário. Ao jogarem cartas distintas para uma mesma User Story, é discutido (geralmente entre os jogadores que colocaram os dois pontos mais distantes) o motivo deles avaliarem aquela estória daquela forma; e Mike Cohn defende que você considere uma estória como avaliada somente quando todos do time chegarem a um consenso quanto ao peso daquela estória. Isso garante o diálogo, além de melhorar o comprometimento e a motivação. Quando a motivação acaba Como garantir algo tão subjetivo durante todo o projeto? Esse é um problema grave não só no Scrum, mas em qualquer outra metodologia ágil. E a resposta é como esperado: você não garante! Então nada pode ser feito para que sua equipe se motive? Não, o fato de que motivação é algo subjetivo, não quer dizer que você não possa prover as ferramentas ou o ambiente necessário para sua equipe continuar seguindo motivada. Vou considerar aqui que os colaboradores com quem você convive já são pessoas motivadas por natureza, que é o que se espera num ambiente ágil, e que é necessário apenas manter a motivação. Então vou citar aqui os principais motivos que levam um colaborador a se desmotivar durante o projeto: Stakeholders não comprometidos, mas envolvidos apenas com cobranças desalinhadas. Sabe aquele cliente que nunca comparece aos eventos Scrum e um belo dia resolve ficar a par do projeto? Esse cliente geralmente vai acabar com sua Sprint, vai destruir a blindagem do seu time de desenvolvimento e deixará seu Product Owner (caso não seja ele mesmo) louco. Tenha um cuidado especial com o efeito negativo desse stakeholder na motivação do seu time. Projetos longos que não se renovam. Não me entenda mal. As metodologias ágeis existem com o lema de que mudanças são sempre bem vindas, mas se um projeto se alonga por tempo demasiado você irá perceber um certo desânimo na sua equipe. Principalmente se são mudanças que exigem uma série de atividades desgastantes e que acabam levando o projeto a situações do passado (desfazer estórias de usuário é uma das mais críticas). Equipe muito pouco reconhecida por projetos. Nada pior que uma entrega ou finalização de projeto com sucesso, onde o time scrum (PO, SM e equipe de desenvolvimento) não é nem sequer reconhecido pelo seu bom trabalho. É válido destacar aqui que o desenvolvimento ágil tem como objetivo entregar produtos com muito mais valor ao cliente, contudo é mais desgastante para os comprometidos com o projeto. Por isso eu recomendo a qualquer gestor que ao término de cada projeto crie sua maneira de bonificar (isso varia de acordo a sua cultura organizacional) a equipe. Lembre-se sempre de que coisas simples como uma pizza, um happy hour ou qualquer outro tipo de confraternização é suficiente para levantar o moral e deixar sua equipe pronta para o próximo projeto. Quando os pontos negativos individuais interferem no trabalho em equipe Como saber se sua equipe trabalha bem em time? Em alguns casos temos uma equipe madura o suficiente para termos um trabalho em equipe direto e enxuto. Mas quando isso não acontece? Quando um membro do time insiste em ser prolixo nas reuniões? Ou quando questões pequenas consomem mais tempo de discussão do que realmente importa? Quem é o responsável por fazer essas coisas funcionarem? Bem, considerando que temos um líder-servo como papel do Scrum (Scrum Master), cai sobre ele a responsabilidade com toda sua habilidade para servir e liderar ao mesmo tempo lidar com essa situação. Uma boa abordagem é fazer mentorias (aconselhamentos ou tutorias) individuais em pequenas reuniões (bate-papos). Faça com que todo o processo seja o menos assustador possível para aquele que deve ter pontos negativos trabalhados, lembre-se que motivação é uma das chaves do desenvolvimento ágil e você não quer perder um membro motivado em pleno desenvolvimento do projeto, certo? Portanto, o recomendável é fazer da forma mais sutil possível: entenda os motivos que levam o membro a agir daquela forma e através de sugestões e conselhos mostre como ele pode ser mais produtivo para o time como um todo. Lembre-se, o Scrum Master deve ter um excelente conhecimento de sua equipe, logo, essas pequenas mentorias e bate-papos devem ser feitos constantemente. Quando o PO não encontra o cliente Essa é a maior falha em todo projeto, seja em uma metodologia ágil ou clássica. Nesse cenário seu time entrega o que promete com excelência, as cerimonias são cumpridas com precisão, o seu burndown encontra-se impecável. Mas nada do que é entregue é realmente um agregador de valor ao cliente final e provavelmente isso se dará quando o seu Product Owner estiver falando com o Stakeholder errado! Pegando um exemplo simples e claro: Imagine que sua empresa está desenvolvendo um sistema de ponto para uma fábrica, o dono da empresa é seu principal Stakeholder e o Product Owner mantém constante contato com ele. Porém a cada finalização de Sprint você nota que muito trabalho teve que voltar ao backlog ou teve que ser reescrito em outras estórias de usuário. O exemplo ilustra um sinal claro, que um PO atento logo se alarmara, de que é hora de trazer um novo Stakeholder à frente do projeto e ouvi-lo falar sobre qual será o produto ideal para ele. É muito comum, porém, que nem sempre o seu cliente final seja alguém próximo. Ou até mesmo que seu Stakeholder nem sequer o conheça! Aqui entram algumas técnicas do desenvolvimento Lean que eu acho bastante interessantes e que pode ser muito útil para sua empresa e seu trabalho receberem recomendações futuras por salvar a vida de um Stakeholder perdido. Se você já vem trabalhando com Scrum, para entender o Lean é apenas mais alguns passos adiante, por tanto irei abordar aqui rapidamente, mas caso tenha interesse deixarei esse link para maior aprofundamento. O Lean basicamente propõe que você desenvolva um MVP (Minimo Produto Viável, em português), para entrar num ciclo de Construir, Medir e Aprender. Isso tudo feito em pequenas iterações onde cada ciclo completo você tem uma nova iteração 100% funcional (até agora bem familiar, correto?). O ponto principal para você que acabou tendo que conhecer o cliente final do seu cliente, sem mesmo que ele o conheça, é que a cada etapa de Medir e Aprender você deve focar em conhecer mais sobre o usuário final: Teste A/B, Personas, teste presenciais de um possível usuário final, heatmap e muitas outras são técnicas e ferramentas válidas para esse momento. Se você não conhece nenhum dos nomes citados anteriormente, convido-o para que faça uma pausa e dê uma lida, ou ao menos separe alguns materiais para uma lida no futuro. Quando o time não é seu próprio gerente E quando o projeto inteiro é negociado sem conhecimento algum do time de desenvolvimento? E ao avaliar as estórias de usuários se dão conta de que o projeto iria demorar cerca de 6 meses, mas que a negociação e o contrato foram fechados para um prazo de 2 meses? Aqui está claro o problema: o time de desenvolvimento não é seu próprio gerente, suas cerimônias e artefatos estão perdidos! (Meio dramático, eu sei) Mas isso serve para reforçar que esse é um dos momentos mais frustrantes para a equipe de desenvolvimento, pois não será refeita a negociação e sim serão apertados os prazos e as estimativas serão direcionadas por fatores externos. Se você está percebendo um grande problema aqui, você provavelmente já pegou bem a ideia do Scrum... O time de desenvolvimento não mais se encontra blindado e será constantemente influenciado por fatores externos, tais como: cliente, diretores, gerentes ou qualquer nível hierárquico que sua empresa possa possuir. Isso é grave... Isso é muito grave! Se você pode evitar essa situação faça! Caso contrário futuramente será totalmente irremediável durante a execução do projeto e provavelmente fará com que seu time constantemente acabe passando algumas etapas da iteração por cima de outras, levando à um projeto concluído com baixa qualidade e que possivelmente gerará dores de cabeça para seu cliente e por consequência para você em um futuro muito próximo. Obrigado por ler até aqui, espero ter apresentado pontos a serem analisados por você e evitados! Caso tenha mais algum ponto crítico que acha interessante que seja adicionado a esse artigo, elogio ou crítica deixe um comentário &#x1f600; Publicado no dia",pt,t i t l e
16,16,16,1467908016,VIEW,5338677278233757627,8586641302323735033,2634427617785822979,"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",MG,BR,CONTENT SHARED,6352416307575007029,-4627026983118548639,-5757477100502378815,,,,HTML,http://www.mediapost.com/publications/article/279682/the-home-of-the-internet-of-things-everywhere.html?utm_source=newsletter&utm_medium=email&utm_content=headline&utm_campaign=94423,title,"Since the foundation of the Internet of Things is actual networking, innovation can come from virtually anywhere. While many mobile startups were born, nurtured and scaled from New York and California, IoT entities are everywhere. Projects in Asia, Europe and North America are booming, with no real center of activity. There are some notable IoT hotspots, such as Boston and nearby towns, but creation is happening at different scales in different places. Part of the IoT explosion involves technology and part involves using that technology for new marketing methods. And the growth of IoT devices is widespread. For example, wearables are becoming very popular in the Middle East and Africa, with device shipments up almost 65% from a year ago, according to International Data Corp. Another 20% annual growth a year is projected over the next four years. Sensor technology is also being deployed and starting to be used in new ways. In New Zealand, Heineken is using beacons at more than 100 locations to provide big ticket prizes to consumers. Such prices include flights around the country and helicopter rides to a special event. The program, including the mobile app triggered by beacons, was developed by Saatchi and Saatchi. In China, the first mass produced smart car is being introduced by Alibaba. The so-called 'Internet car' has its own unique operating system rather than relying on one from Apple or Google. In London, slow-moving delivery robots will haul food on-demand to consumers. More than 25 robots have driven about 5,000 miles in earlier tests in London and Estonia. Other robotic and drone package delivery services are being developed in numerous countries, along with Amazon and Google. An automated system in Australia is launching for beer brewing. The system uses Wi-Fi, precise temperature control and fermentation technology at the touch of a button. The remote-controlled brewing is expected in the U.S. later this year. Virtual Reality, one of the hottest IoT growth areas, is being added to NBC's Olympic coverage. Using Samsung's Gear VR, viewers will have access to 85 hours of VR content through the NBC sports app. There are many more examples, but you get the idea. The home of innovation for this tech-based revolution has no obvious place. ---------------------------------------------------------------------------------------------- Marketing in connected homes? Come hear Trevor Guthrie of Giant Spoon, Dino Hainline of Midnight Oil, Greg Hedges of Rain and Jeff Suhy of Modop at the MediaPost IoT Marketing Forum Aug. 3 in New York. Check it out the agenda here .",en,t i t l e
17,17,17,1460112545,VIEW,6941466664989793964,1895326251577378793,-1071460645112288802,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36",SP,BR,CONTENT SHARED,-6661204361884000663,-2979881261169775358,-4604533051470409227,,,,HTML,http://blog.takipi.com/java-9-early-access-a-hands-on-session-with-jshell-the-java-repl/,title,"How can you start using one of the coolest features of Java 9 starting today? Last weekend I finally got around to getting my hands dirty with an early access version of Java 9. The first stop was JShell, which also goes by the name of Project Kulla; the reason that got me to gather up the courage to try the early access Java version in the first place. That's right. The official Java 9 release date is currently set to September 2016, but the early access version already has a fully functional version of JShell. It's still under development and has a few quirks in it, but that never stopped us before. New Post: Java 9 Early Access: A Hands-on Session with JShell - The #Java REPL pic.twitter.com/JoWR6i8PSz - Takipi (@takipid) July 7, 2015 Fun fact #1: Project Kulla is the internal name for the team developing JShell. Kulla is the name of a builder god from the Mesopotamian mythology, who was banished after the construction work was completed. Hinting at Kulla's use case as a learning tool? So what is this JShell thing? JShell / Project Kulla is the first official Java REPL (Read-Eval-Print-Loop), a command line tool that lets you run Java statements on their own without having to wrap them in classes or methods. Similar in a way to Python's interpreter, or to other JVM languages that natively support REPL like Scala and Groovy. Among the upcoming features of Java 9, it's definitely one of the more interesting ones. To check out more exciting features (apart from Project Jigsaw!) that are coming to the JDK near you, you can read a previous post of ours around the top 5 features in Java 9 that will change how you code . Up until now, if you wanted to REPL in Java you could have used alternatives like repl.it which has multi langauge support or the unofficial Java REPL project. With Java 9 though, REPL is bundled right into the JDK together with the langtools package. Fun fact #2: Another OpenJDK project with a mythological name is project Valhalla; aiming beyond Java 9, and working on features like value types and reified generics. Definitely badass. But enough with that, let's fire it up and see what it can do. In the following short terminal recoding we're going through a quick test run with JShell v0.61 (There's a known issue with OSX 10.10.3 where the prompt mixes with some of the output so please don't mind that, it'll probably be fixed soon): Firing up and playing around with JShell Reviewing what we just saw: Some of the most interesting features of JShell ** [8/7/2015] Update: Edited with notes from Brian Goetz , Java language architect at Oracle 1. Semicolon is optional on bare statements Hello JShell! With the quick and flexible nature of the REPL, we can relax a bit and forget about adding semicolons at the end of our statements: Nope, no semicolon here This was actually a popular response on a survey we ran around future Java features. Of course semicolons are here to stay, either as terminators or separators. The REPL allows entering bare expressions and statements one at a time so semicolons become optional for the terminator use case on Jshell. Simple example showing getting an HTTP header with JShell 2. REPL networking With JShell we're not confined to our machine and have networking access, this opens up some interesting opportunities. For instance, think about using it as a terminal to communicate with your server, connecting to it remotely and controlling some parameters from the outside. Another option would be querying your database, and the possibilities here are really endless. 3. Help! Saving and loading workspaces Apart from running and evaluating Java statements, JShell supports a range of commands to help get you around and navigate through the REPL environment. You can save and load workspaces (which kind of makes Java resemble a scripting language) and then get back on the command prompt after all the code was executed (this is actually where you can see the OS X bug I mentioned in the terminal recording). JShell /help Other useful commands are listing all the current available variables and methods, viewing all your command history, and listing the all the code you wrote so far (which sometimes still behaves a bit weird). Here's the full list of the currently available commands: 4. No checked exceptions If you've been worried about checked exceptions ruining your REPL experience - Fear no more, JShell wraps those for you in the background. In the following example, what would have forced us to catch an IOException, goes away unnoticed. Here we're reading and printing out a file without handling IOExceptions: One case we did see a checked exception pop-up is when we tried to run a thread and used Thread.sleep() in it. Since it's a whole method and not a single bare statement, it has to be fully valid Java: Moving on to a few more features that didn't make it to the terminal recording: 5. Java expressions Another thing about the JShell terminal is that it can also evaluate Java expressions on their on. String concatenation, method calls, arithmetic, whatever. Basically anything that you could have wrapped inside a System.out.println(/* expression here */). As you may have already noticed with other evaluations, it immediately places the result in a variable of its own and prints it out: 6. Forward reference JShell has pretty nifty support for forward references, so you can define functions that reference other methods or variables that will only be defined later down the road. Here's an example from the REPL tutorial by AdoptOpenJDK: 7. JShell API Apart from its use as a standalone JDK tool, JShell will also provide an API which opens up all its functionality to external use. This means external tools could hook up and use JShell's capabilities, and suddenly some interesting possibilities open up like including it as part of IDEs like Eclipse, IntelliJ or Netbeans. More creative use cases for the API could include tools using it to extend static analysis capabilities, automated testing or maybe even hooking up to live JVMs. 8. Changing definitions on the go You can re-declare variables, methods and classes without worrying about the original declarations. Once you do so, you'll be prompted with a message letting you know what happened, but other than that - it's business as usual. Bonus: All you need is love If you dig up your way into the /repl/samples folder, you'll find this cute sample that will draw you 3 little hearts using Swing: How to get started on your own? To get started, check out the instructions on the Adopt OpenJDK: Getting Started Kit from the London Java Community (LJC). Here's a quick summary of the steps to help get you off the ground, especially if you've never played around with early access JDK versions before: 1. Install the Java 9 early access JDK 2. Build the kulla-dev branch: cd langtools/repl bash ./scripts/run.sh bash ./scripts/compile.sh hg clone kulla-dev cd kulla-dev bash configure -with-boot-jdk=/path/to/jdk1.8.0 make clean images make install <=== optional 3. Build the REPL: 4. And... now you're ready to run.: 15 tools to use when deploying new code to production - View tool list Java 8 exceptions have never been so beautiful - Try Takipi for Java 8 Important note for OS X users: Before running compile.sh & run.sh edit the scripts and change #!/usr/bin/sh to #!/bin/sh . If you have any questions about the process, please post them in the comments section below and we'll do our best to help. Conclusion It's exciting to see how Project Kulla is getting closer to maturity where it will have a feature-complete status. JShell has a wide range of use cases but first and foremost, it will help new and existing developers quickly test their newly learned skills. Be it basic Java or some new library you're just starting to wrap your head around. Moreover, JShell brings Java on par with languages that have these capabilities for a while now, and perhaps even pushes the envelope further, with an official API and a smooth command line experience.",en,t i t l e
18,18,18,1468518071,VIEW,4313871021753084020,2146546851324474301,-8005187578213798794,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36",SP,BR,CONTENT SHARED,-1638122353599615846,8676130229735483748,-2413784802356185288,,,,HTML,http://meiobit.com/347498/ufs-samsung-apresenta-mais-um-formato-de-cartao-de-memoria/,title,"Nos primórdios dos dispositivos portáteis a vida era um inferno. Cada um puxava a brasa pra sua sardinha. A Sony empurrava o Memory Stick, fabricantes de câmeras mais profissionais preferiam os cartões Compact Flash, a Olympus usava um tal de xD, e tínhamos o MMC, que depois digievoluiu pra SD, pro mini-SD e finalmente pro micro-SD, que já é ridiculamente pequeno. A capacidade é bem generosa, uns malucos conseguiram produzir um micro-SD com 512 GB , verdadeira grosseria, mas pra quem vende cartão, é pouco. O negócio é fazer com que as pessoas comprem cartões para substituir os existentes, então estão seguindo a estratégia da Palm, que todo lançamento vinha com um conector novo e incompatível com o PDA antigo. A bola da vez? O formato UFS, Universal Flash Storage, que vem com todas as velhas promessas: Mais velocidade, capacidade, agilidade, blá blá blá. Dizem que o UFS tem velocidade de leitura de 530 MB/s, 20× mais rápido que um micro-SD, e gravação sequencial 2× mais rápido que o micro-SD. Gravação aleatória em teoria é 350× mais rápida no UFS... Ele é compatível com os slots micro-SD, no sentido que que seu micro-SD vai funcionar nos equipamentos UFS, mas não o contrário. Aí eu pergunto: alguém precisa MESMO de tanta velocidade? Baixar um micro-SD lotado para o PC é o tempo certinho de pegar um café com calma e pensar na vida. Fonte: Android Authority . Relacionados: cartões , Micro-SD , mini-SD , MMC , SD , Secure Digital , UFS , Universal Flash Storage , xD",pt,t i t l e
19,19,19,1465926133,VIEW,-1178371721262103855,6259736937759908767,-7442920495219157513,,,,CONTENT SHARED,-2808969983997441543,5127372011815639401,-8628566829311364938,,,,HTML,https://developers.google.com/web/updates/2016/06/css-containment,title,"TL;DR The new CSS Containment property lets developers limit the scope of the browser's styles, layout and paint work. It has a few values, making its syntax this: It's in Chrome 52+ and Opera 40+ (and it has public support from Firefox ), so give it a whirl and let us know how you go! The contain property When making a web app, or even a complex site, a key performance challenge is limiting the effects of styles, layout and paint. Oftentimes the entirety of the DOM is considered ""in scope"" for computation work, which can mean that attempting a self-contained ""view"" in a web app can prove tricky: changes in one part of the DOM can affect other parts, and there's no way to tell the browser what should be in or out of scope. For example, let's say part of your DOM looks like this: And you append a new element to one view, which will trigger styles, layout and paint: In this case, however, the whole DOM is effectively in scope, meaning that style, layout, and paint calculations will have to consider all the elements irrespective of whether or not they were changed. The bigger the DOM, the more computation work that involves, meaning that you could well make your app unresponsive to user input. The good news is that modern browsers are getting really smart about limiting the scope of styles, layout, and paint work automatically, meaning that things are getting faster without you having to do anything. But the even better news is that there's a new CSS property that hands scope controls over to developers: Containment . The contain property CSS Containment is a new property, with the keyword contain, which supports four values: Each of these values allows you to limit how much rendering work the browser needs to do. Let's take a look at each in a little more detail. Layout (contain: layout) This value turns on layout containment for the element. This ensures that the containing element is totally opaque for layout purposes; nothing outside can affect its internal layout, and vice versa. Containment spec Layout containment is probably the biggest benefit of containment, along with contain: paint . Layout is normally document-scoped, making it scale proportionally to the size of your DOM, so if you change an element's left property ( as just one example ), every single element in the DOM might need to be checked. Enabling containment here can potentially reduce the number of elements to just a handful, rather than the whole document, saving the browser a ton of unnecessary work and significantly improving performance. Paint (contain: paint) This value turns on paint containment for the element. This ensures that the descendants of the containing element don't display outside its bounds, so if an element is off-screen or otherwise not visible, its descendants are also guaranteed to be not visible. Containment spec Scoping paint is another incredibly useful benefit of containment. Paint containment essentially clips the element in question, but it has also has a few other side effects: It acts as a containing block for absolutely positioned and fixed position elements. This means any children are positioned based on the element with contain: paint not any other parent element like - say - the document. It becomes a stacking context. This means that things like z-index will have an effect on the element, and children will be stacked according to the new context. It becomes a new formatting context. This means that if you have, for exaple, a block level element with paint containment, it will be treated as a new, independent layout environment. This means that layout outside of the element won't typically affect the containing element's children. Size (contain: size) The value turns on size containment for the element. This ensures that the containing element can be laid out without needing to examine its descendants. Containment spec What contain: size means is that the element's children do not affect the parent's size , and that its inferred or declared dimensions will be the ones used. Consequently if you were to set contain: size but didn't specify dimensions for the element (either directly or via flex properties), it would be rendered at 0px by 0px! Size containment is really a belt-and-braces measure to ensure you don't rely on child elements for sizing, but by itself it doesn't offer much performance benefit. Style (contain: style) This value turns on style containment for the element. This ensures that, for properties which can have effects on more than just an element and its descendants, those effects don't escape the containing element. Containment spec It can be hard to predict what the effects on the DOM tree of changing an element's styles will be back up the tree. One example of this is in something like CSS counters , where changing a counter in a child can affect counter values of the same name used elsewhere in the document. With contain: style set, style changes won't get propagated back up past the containing element. To be super clear, what contain: style doesn't provide is scoped styling as you'd get from Shadow DOM ; containment here is purely about limiting the parts of the tree that are under consideration when styles are mutated, not when they are declared. Strict and content containment You can also combine keywords, such as contain: layout paint , which will apply only those behaviors to an element. But contain also supports two additional values: contain: strict means the same as contain: layout style paint size contain: content means the same as contain: layout style paint Using strict containment is great when you know the size of the element ahead of time (or wish to reserve its dimensions), but bear in mind that if you declare strict containment without dimensions, because of the implied size containment, the element may be rendered as a 0px by 0px box. Content containment, on the other hand, offers significant scope improvements, but does not require you to know or specify the dimensions of the element ahead of time. Of the two, contain: content is the one you should look to use by default. You should treat strict containment as something of a more an escape hatch when contain: content isn't strong enough for your needs. Let us know how you get on Containment is a great way to start indicating to the browser what you intend to be kept isolated within your page. Give it a try in Chrome 52+ and let us know how you get on! Authors Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License , and code samples are licensed under the Apache 2.0 License . For details, see our Terms of Service .",en,t i t l e
20,20,20,1469716233,VIEW,8749720044741011597,-9016528795238256703,5551113257927184132,"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",MG,BR,CONTENT SHARED,-986027724303592548,-5527145562136413747,6496989572155983473,,,,HTML,https://www.technologyreview.com/s/602025/how-vector-space-mathematics-reveals-the-hidden-sexism-in-language/,title,"Back in 2013, a handful of researchers at Google set loose a neural network on a corpus of three million words taken from Google News texts. The neural net's goal was to look for patterns in the way words appear next to each other. What it found was complex but the Google team discovered it could represent these patterns using vectors in a vector space with some 300 dimensions. It turned out that words with similar meanings occupied similar parts of this vector space. And the relationships between words could be captured by simple vector algebra. For example, ""man is to king as woman is to queen"" or, using the common notation, ""man : king :: woman : queen."" Other relationships quickly emerged too such as ""sister : woman :: brother : man,"" and so on. These relationships are known as word embeddings. This data set is called Word2vec and is hugely powerful. Numerous researchers have begun to use it to better understand everything from machine translation to intelligent Web searching. But today Tolga Bolukbasi at Boston University and a few pals from Microsoft Research say there is a problem with this database: it is blatantly sexist. And they offer plenty of evidence to back up the claim. This comes from querying the vector space to find word embeddings. For example, it is possible to pose the question: ""Paris : France :: Tokyo : x"" and it will give you the answer x = Japan. But ask the database ""father : doctor :: mother : x"" and it will say x = nurse. And the query ""man : computer programmer :: woman : x"" gives x = homemaker. In other words, the word embeddings can be dreadfully sexist. This happens because any bias in the articles that make up the Word2vec corpus is inevitably captured in the geometry of the vector space. Bolukbasi and co despair at this. ""One might have hoped that the Google News embedding would exhibit little gender bias because many of its authors are professional journalists,"" they say. So what to do? The Boston team has a solution. Since a vector space is a mathematical object, it can be manipulated with standard mathematical tools. The solution is obvious. Sexism can be thought of as a kind of warping of this vector space. Indeed, the gender bias itself is a property that the team can search for in the vector space. So fixing it is just a question of applying the opposite warp in a way that preserves the overall structure of the space. That's the theory. In practice, the tricky part is measuring the nature of this warping. The team does this by searching the vector space for word pairs that produce a similar vector to ""she: he."" This reveals a huge list of gender analogies. For example, she;he::midwife:doctor; sewing:carpentry; registered_nurse:physician; whore:coward; hairdresser:barber; nude:shirtless; boobs:ass; giggling:grinning; nanny:chauffeur, and so on. The question they want to answer is whether these analogies are appropriate or inappropriate. So they use Amazon's Mechanical Turk to ask. They showed each analogy to 10 turkers and asked them whether the analogy was biased or not. They consider the analogy biased if more than half of the turkers thought it was biased. The results make for interesting reading. This method clearly reveals a gender bias in pairings such as midwife:doctor; sewing:carpentry, and registered_nurse:physician, but that there is little bias in pairings such as feminine:manly; convent:monastery; handbag:briefcase, and so on. Having compiled a comprehensive list of gender biased pairs, the team used this data to work out how it is reflected in the shape of the vector space and how the space can be transformed to remove this warping. They call this process ""hard be-biasing."" Finally, they use the transformed vector space to produce a new list of gender analogies and then ask turkers to rate them again. This produces pairings such as: she:he::hen:cock; maid:housekeeper; gals:dudes; daughter:son, and so on. This process, they say, dramatically reduces the bias that Turkers report. ""Through empirical evaluations, we show that our hard-debiasing algorithm significantly reduces both direct and indirect gender bias while preserving the utility of the embedding,"" say Bolukbasi and co. The end result is a vector space in which the gender bias is significantly reduced. That has important applications. Any bias contained in word embeddings like those from Word2vec is automatically passed on in any application that exploits it. One example is the work using embeddings to improve Web search results. If the phrase ""computer programmer"" is more closely associated with men than women, then a search for the term ""computer programmer CVs"" might rank men more highly than women. ""Word embeddings not only reflect stereotypes but can also amplify them,"" say Bolukbasi and co. Clearly, language is filled with many examples of gender bias that are hard to justify. An interesting question is the extent to which this kind of vector space mathematics should be used to correct it. ""One perspective on bias in word embeddings is that it merely reflects bias in society, and therefore one should attempt to debias society rather than word embeddings,"" say Bolukbasi and co. ""However, by reducing the bias in today's computer systems (or at least not amplifying the bias), which is increasingly reliant on word embeddings, in a small way debiased word embeddings can hopefully contribute to reducing gender bias in society."" That seems a worthy goal. As the Boston team concludes: ""At the very least, machine learning should not be used to inadvertently amplify these biases."" Ref: arxiv.org/abs/1607.06520 : Man Is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings.",en,t i t l e
21,21,21,1469714751,VIEW,-3780822597455574960,3609194402293569455,-3607853734254017965,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36",SP,BR,CONTENT SHARED,-3780822597455574960,3609194402293569455,-3607853734254017965,,,,HTML,http://spectrum.ieee.org/computing/software/top-programming-languages-trends-the-rise-of-big-data,title,"Illustration: Grzegorz Knec/Alamy Now that IEEE Spectrum is into the third year of annually ranking languages , we can start looking at some trends over time. What languages are ascendant? Which are losing traction? And which of the data sources that we use to create our rankings are contributing the most to these shifts? In this article I'm going to focus on so-called big-data languages, such as Julia , Python , R , and Scala . Most of these are purpose-built for handling large amounts of numeric data, with stables of packages that can be tapped for quick big-data analytic prototyping. These languages are increasingly important, as they facilitate the mining of the huge data sets that are now routinely collected across practically all sectors of government, science, and commerce. The biggest mover in this category was Go , an open source language created by Google to help solve the company's issues with scaling systems and concurrent programming back in 2007. In the default Spectrum ranking , it's moved up 10 positions since 2014 to settle into 10th place this year. Other big-data languages that saw moves since 2014 in the Spectrum ranking were R and Scala, with R ascending 4 spots and Scala moving up 2 (although down from 2015, when it was up 4 places from its 2014 position). Julia was added to the list of languages we track in 2015, and in the past year it's moved from rank 40 to 33, still a marginal player but clearly possessing some momentum in its growth. The chief reason for Go's quick rise in our ranking is the large increase in related activity on the GitHub source code archive. Since 2014, the total number of repositories on GitHub that list Go as the primary language went up by a factor of more than four. If we look at just active GitHub repositories, then there are almost five times as many. There's also a fair bit more chatter about the language on Reddit , with our data showing a threefold increase in the number of posts on that site mentioning the language. Explore the Interactive Rankings Another language that has continued to move up the rankings since 2014 is R, now in fifth place. R has been lifted in our rankings by racking up more questions on Stack Overflow -about 46 percent more since 2014. But even more important to R's rise is that it is increasingly mentioned in scholarly research papers. The Spectrum default ranking is heavily weighted toward data from IEEE Xplore , which indexes millions of scholarly articles, standards, and books in the IEEE database. In our 2015 ranking there were a mere 39 papers talking about the language, whereas this year we logged 244 papers. Contrary to the substantial gains in the rankings seen by open source languages such as Go, Julia, R, and Scala, proprietary data-analysis languages such as Matlab and SAS have seen a drop-off: Matlab fell four places in the rankings since 2014 and SAS has fallen seven. However, it's important to note that both of those languages are still growing; it's just that they're not growing as fast as some of the languages that are displacing them. When we weight the rankings toward jobs, we continue to see heavily used languages like Java and Python dominate. But recruiters are much more interested in R and Scala in 2016 then they were in 2014. When we collected data in 2014, there were only 136 jobs listed for Scala on CareerBuilder and Dice. But by 2016 there was more than a fourfold increase, to 631 jobs. This growth invites the question whether R can ever unseat Python or Java as the top languages for big data. But while R has seen huge gains over the last few years, Python and Java really are 800-pound gorillas. For instance, we found roughly 15 times as many job listings for pythonistas as for R developers. And while we measured about 63,000 new GitHub repositories in the last year for R, there were close to 458,000 for Python. Although R may be great for visualization and exploratory analysis and is clearly popular with academics writing research papers, Python has significant advantages for users in production environments: It's more easily integrated into production data pipelines, and as a general purpose language it simply has a broader array of uses. These data illustrate that despite the desire of some coders to evaluate languages on purely internal merits-the elegance of their syntax, or the degree and nature of the abstractions used-a big driver for a language's popularity will always be the domains that it targets, either by design or through the availability of supporting libraries.",en,t i t l e
22,22,22,1469653068,VIEW,6341647533150019811,3609194402293569455,-6452196119325644911,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36",SP,BR,CONTENT SHARED,6341647533150019811,3609194402293569455,-6452196119325644911,,,,HTML,http://saiadolugar.com.br/empreendedorismo/videos-motivacionais/,title,"Diversas vezes nos sentimos desanimados, sem vontade de continuar trabalhando ou até mesmo seguir com tarefas cotidianas. É normal se sentir assim às vezes e não há problemas nisso. Entretanto, é válido fazer o possível para conseguir se energizar e fazer o que deve ser feito para que o desânimo não lhe paralise. É por isso que selecionamos aqui os melhores vídeos motivacionais , para ver se conseguimos te ajudar a conseguir o vigor que precisa! Você consegue mais do que pensa. Nessa cena clássica do filme Encarando Gigantes, o técnico pede a um de seus atletas que atravesse 50 jardas (46 metros, aproximadamente) carregando um membro da equipe nas costas. A história de todo o filme é emocionante e carregada de superação, enquanto um técnico fracassado tenta levar seu time a vitória em um campeonato. Para aqueles que não conhecem muito sobre futebol americano, um campo tem em torno de 110 metros e essa informação pode tornar esse trecho ainda mais interessante. Quem é você? Esse treinador quer lhe deixar uma mensagem sobre quem é você. Qual a visão que tem de si mesmo? Seu inimigo pode ser a percepção errônea de que você não pode vencer. Talvez sejam outros, talvez alguém esteja lhe dizendo que você não pode fazer o que sonha. Você tem tido a confiança para provar a eles e para si mesmo que consegue vencer? Que é um campeão? Aproveite o dia pois seu tempo é limitado. No filme Sociedade dos Poetas Mortos, o entusiástico professor John Keating , interpretado por Robin Williams , deixa uma lição a seus alunos nesse curto trecho : Carpe Diem , ou seja, aproveite o dia. A vida é breve e por vezes temos a impressão de que temos todo o tempo do mundo. Entretanto, cada dia é um novo dia para ser aproveitado e o tempo na verdade é bem curto! Persiga seus sonhos e você não se arrependerá. Cada pessoa tem um talento especial, cada pessoa tem uma habilidade e uma preciosidade individual. O que tem feito de suas aptidões? Você tem utilizado aquilo que você possui? Segundo esse curto filme , pessoas não escolhem sonhos, elas são escolhidas por eles. Há algo que você nasceu para fazer: Você tem perseguido o sonho que escolheu você? Você pode estar sofrendo agora, mas você pode sofrer rumo ao sucesso ou sofrer pelo arrependimento de não ter tentado o suficiente. O que você quer ser quando crescer? Esse talvez seja um dos vídeos motivacionais mais transmitidos em palestras motivacionais: O que você quer ser quando crescer ? Quando crianças nos permitimos sonhar, mas em algum momento perdemos um pouco dessa habilidade. Trabalhar, adquirir experiências, se esforçar, para onde essas coisas estão lhe levando? Onde você quer chegar ao final dessa longa jornada de esforço? Às vezes você precisa de um motivo mais forte para adquirir a força de vontade e fazer o que precisava estar realizando nesse exato momento. Qual seu maior sonho? Ayrton Senna e a mensagem de um campeão Quer ouvir ao conselho de um tricampeão mundial de Fórmula 1 e o maior piloto da história do esporte? Veja . Você pode encarar as dificuldades com muita calma e profissionalismo ou no desespero abandonar tudo. Você quer abandonar tudo? Impossível duvidar dessas palavras quando ditas de forma tão pacífica por um verdadeiro vencedor. Como tem vivenciado suas emoções? O que tem feito delas? Qual a sua desculpa do dia? Se há um milhão de razões para fazer algo, sempre conseguimos encontrar dois milhões de razões para NÃO fazer algo. Desculpas vêm e vão, mas as tarefas, os prazos, as responsabilidades e as metas permanecerão lá enquanto nada for feito. Nesse comercial da Nike , Matt Scott lista algumas desculpas comuns enquanto quica suas bolas de basquete. O final deste vídeo pode lhe surpreender. Apenas faça. Os pontos se conectarão no futuro. Nessa montagem de 5 minutos há diversas mensagens profundas que podem lhe incentivar a entrar em movimento. O vídeo se inicia com uma parte do discurso de formatura de Steve Jobs aos formandos de Stanford em que ele diz que é impossível conectar os pontos olhando para frente, pois o sentido de certas coisas só surge quando olhamos para trás. Por exemplo, ao estudar caligrafia, Steve Jobs jamais imaginou que seu esforço em praticar isso o ajudaria a implementar as fontes Serif e Sans Serif do primeiro Macintosh . E imagine o que seria dos computadores atuais sem diferentes fontes? Às vezes por medo ou incerteza é difícil entender porque o esforço que estamos fazendo hoje vale a pena. Mas no futuro nossos atos se encaixarão e por isso é importante seguir em frente. Não é sobre quantas vezes você cai e sim quantas você levanta. Quem nunca se emocionou ao ver o famoso boxeador interpretado por Sylvester Stallone nos filmes Rocky? Nesse vídeo do filme Rocky Balboa, o boxeador dá uma lição ao seu filho: Acredite em si mesmo e no próprio potencial de mudança, pois a vida às vezes não é fácil e culpar aos outros não ajuda. Diversas vezes cairá, o que não significa que você precisa continuar no chão. Esse vídeo vai te dar arrepios. A partir dessa compilação fantástica de cenas de filmes, esportes, citações e discursos famosos você irá se sentir bastante revigorado. Logo no início já é possível sentir alguns arrepios: o vídeo começa com o """", uma dança típica dos aborígenes Maori. Tal dança é praticada por um dos melhores times de rugby do mundo, os neozelandeses All Blacks antes de cada disputa. O início desse vídeo carrega um pouco da energia desse time famoso. Aproveite e pegue um pouco dela para você. Por que caímos? Mais uma compilação interessante. Se estiver passando por um momento difícil agora, pode ser para você. Falhar faz parte do processo, mas isso não quer dizer que deva desistir: Um passo, um centímetro de cada vez, caminhe no sentido do sucesso e em algum momento você o alcançará. Onde quer estar em 5 anos? O que fazemos hoje define o que teremos amanhã. Se procrastinarmos, adiando o que realmente importa, isso se torna um hábito. Nosso futuro é construído sobre os tijolos de nossos hábitos. Se você se torna um procrastinador, então não alcançará nada diferente do que tem hoje. Entretanto, se der o melhor de si hoje, terá mais amanhã. Onde quer estar em 1 ano? E em 5 anos? Você tem feito o que é necessário para chegar lá? Veja essa mensagem . Mude sua mente para mudar sua atitude. É difícil mudar de hábitos, é difícil alterar sua forma de ver as coisas. Entretanto, se mudar seus pensamentos, suas atitudes acompanharão. Se modificar suas atitudes, seus pensamentos evoluirão de acordo. É um ciclo vicioso de sucesso e motivação. Talvez lhe ajude a mudar sua mente. Quem está lhe sabotando agora? O que está lhe impedindo de crescer? Será que você está minando a sua própria grandeza? Há obstáculos difíceis na estrada para o sucesso, mas só depende de você avaliar as opções que tem e encontrar os seus caminhos para alcançá-lo. Os outros não precisam acreditar em você, mas a autoconfiança é essencial. Confira sobre tempos difíceis para lhe ajudar a entender isso. Proteja seu sonho. Em ""À Procura da Felicidade"", Will Smith interpreta o pai de família Chris Gardner. A história baseada em fatos reais retrata como Chris, desempregado, abandonado pela esposa e com um jovem filho para criar, se esforça para vencer passando por diversas adversidades como dormir em abrigos e até passar uma noite em um banheiro do metrô. Em uma das diversas cenas emocionantes, Chris deixa essa mensagem ao seu filho: Proteja seu sonho. As pessoas às vezes lhe dirão que você não consegue fazer algo porque elas não conseguem fazê-lo elas mesmas. Não deixe que os outros lhe digam o que pode ou não fazer, se tiver um sonho, persiga-o. Seja o capitão de seu destino. ""Invictus"" é o nome do filme baseado na história real em que Nelson Mandela ajudou a seleção sul-africana de rugby a ganhar a copa do mundo em 1995 em um período nebuloso da história da África do Sul. Nessa cena do filme , enquanto o capitão François Pienaar visita a prisão em que Nelson Mandela permaneceu por 27 anos, é citado um poema de William Ernest Henley de mesmo nome: ""Invictus"". Esse poema, o favorito de Nelson Mandela , reflete a mentalidade de quem após tanto tempo em dificuldade ainda conseguiu presidir uma nação. Use o ""porquê"" certo. Quantas vezes nos perguntamos: ""Por que estou sofrendo?"" ""Por que isso aconteceu logo comigo?"" Mas esquecemos do mais importante: porque estamos na posição em que sofremos? Não é essa a única forma de alcançar aquilo que tanto almejamos? lhe questionarão diversos ""porquês"". Mas alguns deles lhe lembrarão a razão de estar onde está. Hora de acordar. ""6 da manhã e você não consegue alcançar o despertador a tempo, antes das vozes em sua cabeça começarem a lhe dizer que está muito cedo, muito escuro e muito frio para sair da cama."" Quantos não se identificam com essa frase do início desse vídeo ? Pode ser muito difícil ter o auto controle para não se deixar levar por esse tipo de pensamento. Sentir-se triste, cansado ou angustiado não é necessariamente um motivo para não agirmos. Aceitar as próprias emoções e abraçá-las faz parte do processo, mas o que sentimos e o que fazemos são coisas distintas. Sentir-se desmotivado não precisa impedi-lo de fazer o que precisa ser feito. Afinal, o que leva ao bem estar são as escolhas cotidianas entre fazer o que acha certo e o que acha errado, mesmo que fazer o certo muitas vezes dê mais trabalho e não dê a recompensa imediata. A famosa zona de conforto. Zona de conforto é quando você não sente medo, não se expõe ao novo, está extremamente confortável e agindo da maneira a qual você já está acostumado. Entretanto, qual o custo de estar sempre confortável? Seguir o seu propósito pode trazer algum desconforto, você está preparado para lidar com ele? Quem está faminto não mede esforços para conseguir comida. A medida que barreiras são ultrapassadas você ficará cada vez mais confortável, ficará cada vez mais fácil. A persistência é como um músculo, exercite-o. apresenta palestras motivacionais de Les Brown , E ric Thomas e Elliot Hulse. Falhar é diferente de fracassar. Não há problema em tropeçar, em cair, em cometer erros. Falhar faz parte do processo de crescimento. O fracasso, entretanto, acontece quando nós desistimos de tentar. Às vezes as pessoas querem mais: Mais viagens, mais experiências, mais dinheiro. Mas elas não tentam o suficiente. Elas não sabem o custo de conseguir tais benefícios. Essa é só uma das diversas lições que Les Brown , palestrante motivacional lhe dá nesse vídeo . Quanto você quer o sucesso? Só há um caminho para o sucesso: a ação. É essa a mensagem principal desse clipe motivacional . Há algo poderoso em ver pessoas agindo, pois nos incentiva a agir também. Se quiser alcançar o sucesso deve agir de forma eficiente, planejada e com sabedoria. Quanto você realmente quer o sucesso? Quer mais do que dormir mais 5 minutos? Quer mais do que ir para aquela festa? Sem nos mover é impossível vencer, então mova-se! Segundo o palestrante motivacional Eric Thoma s, você tem de querer o sucesso tanto quanto você quer respirar. E agora? Esses são alguns dos melhores vídeos da internet para motivar as pessoas. Uma dica: Pode ser legal ter alguns deles à mão para quando você estiver com dificuldades de sair da cama ou até para te dar energia antes de reuniões e encontros importantes. Salve seus favoritos em seu navegador. Use-os à vontade. Entretanto, não se esqueça de utilizar esse entusiasmo em algo importante para você: A motivação logo se torna frustração quando não utilizada em algo produtivo. Para se motivar ainda mais, veja a nossa seleção das melhores palestras motivacionais! Então, agora que está motivado que tal saber um pouco mais sobre como agir para sair do lugar? Confira nosso texto sobre como começar uma empresa na internet .",pt,t i t l e
23,23,23,1469797610,VIEW,4695698299220703541,-6627505417926774253,-2856172625122944336,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36",MG,BR,CONTENT SHARED,4695698299220703541,-6627505417926774253,-2856172625122944336,,,,HTML,http://trickyandroid.com/the-dark-world-of-jack-and-jill/,title,"Last year Google released new toolchain - Jack (Java Android Compiler Kit) and Jill (Jack Intermediate Library Linker) which is intended to replace existing javac + dx pipeline. In this article I will try to gather my thoughts and concerns regarding this new toolchain. But before I start digging deeper into Jack&Jill I want to take a little detour and give you a high level overview of the existing toolchain and the process of compiling your beloved Android app. Android code compilation 101 To be completely honest, I will not go through entire build process - I will only concentrate on part which is the most relevant to our topic - transforming Java source code into DEX file. Ever since the first dinosaur stepped on this planet, compilation process was going as follows: We start with a plain Java source code. And the goal - is to compile this source code into executable instructions which JVM on your device can understand. For plain Java (not Android) application, we just need a Java compiler ( javac ). This beast can compile Java source code into Java bytecode (*.class files). Java bytecode can be executed by a regular JVM which (most likely) is running on your machine. The thing is, that on Android we use a non-standard JVM. We use its modified version which is highly optimized for mobile environment. Such JVM is called Dalvik (or ART on L+ devices which is even more performant). So since JVM is modified, Java bytecode needs to be modified as well, so Dalvik can understand it. That's the responsibility of dx tool - it takes Java bytecode ( .class files) and transforms it into Android-friendly bytecode (*.dx file) Its interesting to mention that when you include third party library in your project - it comes as a jar (or aar for Android libs) - which in turn is nothing more than just a zipped collection of *.class files 1 . So third party lib goes straight to dx tool because we don't need to compile it. So far its pretty simple, right? Bytecode manipulation As time passed and Android developers became more experienced, people started developing cool tools and plugins which can enhance your code at the Java bytecode level (a.k.a bytecode manipulation). Most popular tools you might have probably heard of: Proguard Jacoco coverage Retrolambda ...and many more It gave us a cool ability to post-process our code w/o making changes to our original sources. F.i. Proguard can analyze your Java bytecode and remove parts which are not used (also known as minimization). Or Retrolambda replaces Java8 lambdas with anonymous inner classes, so your ""lambdas"" work on Android VM which does not support Java8 features 2 . Here is what it looks like: Each class (its bytecode) is processed by bytecode manipulation plugin and the result is fed to dx tool to produce final result. Transform API As number of such tools started to increase it became obvious that Android Gradle build system was not really designed for bytecode manipulators - the only way to ""catch"" the moment when Java bytecode is ready, but not yet processed by dx was to add Gradle task dependency to existing task created by Android Gradle plugin. The name of that task was an implementation detail, it was generated dynamically based on project configuration and Google kept changing it as Android Gradle Plugin evolved. This led to the problem that all those plugins kept breaking with every new Android Plugin release. So Google needed to act. And they did - they introduce Transition API - a simple API which allows you to add a Transformer - class which will be called at the appropriate time of the build process. The input is a Java bytecode. This allows plugin developers to use a much more reliable way of manipulating bytecode and stop using undocumented private APIs. Jack & Jill At the same time, somewhere in parallel in a dungeon, group of Googlers were super busy creating something new, something which will blow everybody's mind! Self driving cars! Jack and Jill! Jack - is a compiler. Similar to javac , but it does a slightly different thing: As you can see, Jack compiles Java source code straight into Dex file! We don't have intermediate *.class files anymore, so dx tool is not needed! But wait! What if I include a third-party library in my project (which comes as a collection of .class files)? And that's when Jill comes into play: Jill can process class files and transform them into special Jayce format which can be used as an input for Jack compiler. So now let's step aside for a second and think... What is going to happen to all those cool plugins we got so addicted to? They all need .class files and Jack compiler doesn't have those anymore... Luckily, Jack provides some of those important for us features out of the box: Retrolambda - will not be needed. Jack can handle lambdas properly Proguard - it is baked into Jack now, so you can still use obfuscation and minimization However, list of downsides is a bit concerning: Transform API is not supported by Jack - there is no intermediate Java bytecode you can modify, so some plugins I didn't mention here will stop working Annotation processing is not currently supported by Jack, so if you heavily depend on libraries like Dagger, AutoValue, etc., you should think twice before switching to Jack. EDIT: As pointed out by Jake Wharton, Jack in N Preview has annotation processing support, but it is not exposed yet through Gradle. Lint detectors which operate on a Java bytecode level are not supported Jack is currently slower than javac + dx Jacoco is not supported - well, I personally find Jacoco questionable (it doesnt really show what you want to see), so can totally live without it Dexguard - enterprise version of Proguard is not currently supported I realize that things I just mentioned are temporary and Google is actively working on addressing them, but unfortunately all that excitement around Android supporting Java8 features will fade pretty soon when people start to realize the real cost behind switching to the new toolchain. Jack is a really cool move and will give Google much more control and flexibility with the build pipeline, but it is in its very early stage and it will take a while before it will start gaining its popularity. Always yours, Pavel Dudka Please enable JavaScript to view the",en,t i t l e
24,24,24,1468244860,VIEW,-5879360586463363298,2766187446275090740,-4768872699208192784,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36",MG,BR,CONTENT SHARED,-3102446808559723934,3609194402293569455,-493688854152847866,,,,HTML,http://startupi.com.br/2016/07/visa-e-swatch-lancam-relogio-para-pagamentos-contactless-no-brasil/,title,"Acaba de chegar oficialmente ao Brasil o novo relógio da Swatch Bellamy - um ""bel ami"", bom amigo em francês. Através de sua tecnologia de pagamento sem contato, o produto chega ao mercado para auxiliar quem está com pressa na hora de fazer ou prefere sair de casa sem carregar a carteira no bolso. O Swatch Bellamy é uma alternativa ao dinheiro em espécie: basta aproximar o relógio de um terminal de pagamento sem contato por um instante e a transação será efetuada em questão de segundos. Como a realização de pagamentos sem contato não exige energia, a bateria da pulseira pode durar por anos. Diferentemente dos cartões de pagamento tradicionais, não há nada no relógio que mostre que ele possa ser utilizado para tal finalidade, tornando-o uma forma de pagamento mais discreta que as demais. Cada relógio vem equipado com uma antena NFC (Near Field Communications) embutida e um chip contactless da Visa para comunicação com terminais de pagamento sem contato. Semelhante aos cartões pré-pagos sem contato, os gastos são debitados de créditos previamente carregados por meio de uma função de pagamento bancário associada. Desta forma, mesmo que o usuário perca seu relógio, o crédito estará seguro. Após adquirir um dos quatro modelos já disponíveis, os clientes devem se cadastrar junto à sua instituição bancária e depositar créditos em seu relógio. Os usuários podem fazer compras tanto no Brasil quanto em qualquer parte do mundo que aceite o pagamento sem contato da Visa. Para visualizar saldo e extrato, o usuário deve acessar a página da Swatch para os relógios Bellamy . O Swatch Bellamy possui parceria com a Visa e a Brasil Pré-Pagos. A OT (Oberthur Technologies) foi a empresa selecionada para fornecer a solução de pagamento NFC e a personalização de dados, garantindo aos usuários a realização de pagamentos seguros e sem contato. A Swatch escolheu o Brasil para ser o primeiro país das Américas a começar a usar o Swatch Bellamy. Esta nova forma de pagamento foi lançada na China e na Suíça no início do ano. Os primeiros modelos estão disponíveis no Brasil todo a partir deste mês, no valor de R$ 725.",pt,t i t l e
25,25,25,1470410155,LIKE,5468598741732935699,-1602833675167376798,-5607517753869111747,,,,CONTENT SHARED,-2554512494756911972,1895326251577378793,4845135633002089199,,,,HTML,http://www.mckinsey.com/business-functions/business-technology/our-insights/how-enterprise-architects-can-help-ensure-success-with-digital-transformations,title,"Those who design and steer the development of the technology landscape can mitigate risk by setting operating standards and promoting cross-functional collaboration. Most CEOs understand the potential upside of a digital transformation. If they can get it right, their companies can be more efficient, more agile, and better able to deliver innovative products and services to customers and partners through multiple channels. About 70 percent of executives say that over the next three years, they expect digital trends and initiatives to create greater top-line revenues for their businesses, as well as increased profitability. There are tangible risks associated with these efforts, however. Traditional companies want to behave like start-ups, but they usually don't have the technology infrastructures or operating models to keep up with companies that have been digital from the start. Their shortcomings can have consequences. Traditional companies undergoing digital transformations may continue to build ever-more-complicated IT systems, deploying new features or patches and fixes on the fly to meet immediate needs without any clear road map or consideration of future IT needs. The Enterprise Architecture Survey Indeed, an in-depth survey we conducted with Henley Business School on enterprise-architecture management revealed such patterns among companies pursuing digital transformations (see sidebar, ""The Enterprise Architecture Survey""). When companies go all in on digitization, the number of point-to-point connections among systems rises almost 50 percent, the quality of business-process documentation deteriorates, and services get reused less often (Exhibit 1). These firms experience greater complexity in systems and processes-and not just in the near term, as digital projects are rolled out, but also in the long term, as companies seek to extend pilot programs and applications to all functions and business units. In the latter scenario, IT organizations may need to do a lot of systems and applications rework and reengineering to enable even the most basic digital activities. Companies may be slower to market with new products and services, and less able to react quickly to changing customer demand. The enterprise-architecture (EA) department can play a central role in reducing the complexity associated with digital transformations. Most companies have a dedicated EA group embedded within the larger IT organization. This group typically oversees the entire systems architecture, including business processes and IT infrastructure. It helps to establish rules for and processes around technology usage to ensure consistency across business units and functions. As such, this group can help the CEO and others on the senior leadership team redesign their companies' business and IT architectures so that they can avoid some of the pitfalls cited earlier and compete more effectively in a digital era. An operating model for company-wide agile development Read the article The findings from our research suggest that when the EA group is directly involved in digital-transformation projects, the documentation and communication between business and IT stakeholders improves significantly. What's more, organizations are likelier to focus on capturing tangible benefits from the transformation-an important factor in mitigating the risk of black swans -and to devote more time and attention to planning. They may also be able to launch products and services more frequently, given the reduced complexity. Most companies are not prepared for this to happen, however. More than 40 percent of respondents in our survey say that the business leaders in their companies are not aware of what the EA group does. We believe that to improve the odds that a digital transformation will succeed, CEOs and CIOs need to raise the profile of enterprise-architecture departments within their companies and to develop the business and interpersonal capabilities of their enterprise architects. Empowering the EA group The enterprise-architecture professionals we surveyed said that the top goals in their IT organizations are executing digital programs-such as cloud computing and online business models-and simplifying and modernizing their IT systems. Reducing complexity is especially critical, they told us, for ensuring that companies can capitalize on digital technologies, support agile and DevOps product-development methodologies, and respond to customers' needs more quickly. To successfully deploy agile development methodologies, for instance, companies need their business units and their IT organization to have a common understanding of both products and processes. These groups must have a joint view, for instance, of which applications are ""mission critical"" versus just nice to have, which processes are uniquely required, and which are being duplicated across multiple business units. The enterprise-architecture group is in a prime position to support these decisions and help create a unified perspective on what needs to change. Good things can happen with EA involvement, but our research indicates a general lack of awareness of enterprise-architecture groups within most organizations-who they are and what they do. Some enterprise architects told us that, during the course of their work assignments, they are actually more likely to interact with suppliers than with internal business executives and C-level leaders. When this happens, the EA group can enter into an unproductive cycle: its capability and process models won't accurately reflect business needs and therefore won't be used by the business to make critical technology decisions. CIOs and CEOs can heighten the awareness of enterprise-architecture groups and empower them by setting the right tone operationally and by facilitating talent development. Operating-model factors Sometime in the early 2000s, as Amazon was starting to establish a service-oriented architecture, CEO Jeff Bezos distributed a memo. In it, he mandated that all teams use open application programming interfaces and web services to share data and functionality. He made it clear that those not following the rules would be fired. Having this level of CEO attention on a very technical topic prompted change within this digital organization. Similarly, company leaders in traditional organizations, especially at the top but also at the line-management level and in the boardroom, need to engage more deeply with enterprise-architecture topics. They don't necessarily need an Amazon-like shift of the entire operating model, but it is important for them to include the enterprise-architecture team in formal discussions about processes, policies, and strategy. CEOs and CIOs can also put more of the spotlight on EA groups by doing the following: Give them more responsibility. Even among those in the know about enterprise architecture, the perception in many companies is that this back-office group can have only limited impact on overarching corporate initiatives-particularly compared with other technology-oriented groups (application development, for instance) that tend to have bigger budgets and direct responsibility for core operational areas. CIOs and CEOs can reverse this perception by giving EA departments more responsibility for certain big-picture decisions; for instance, they can give authority in the approval process for changes to the technology landscape. Otherwise, the policies and guidelines the EA department develops may never gain traction across the company. Measure their performance. It can be difficult for CIOs and enterprise architects to determine the EA group's direct contribution to corporate performance because so much of the day-to-day work depends on input from individual business units, ever-changing strategy and budget decisions, and other interdependencies. There is no simple formula for demonstrating absolute impact, but one feasible approach is for the enterprise-architecture team to routinely provide the business units with the ""technology costs"" of any important decisions they make-for instance, trade-offs in cost, time, and quality when a new technology is deployed and used in place of an alternative. The business would get the information it needs to make critical decisions, and enterprise architects would gain a direct line of communication to the business. Talent factors Pushing enterprise architecture toward the top of the agenda, giving greater responsibility to the EA group, and coming up with clear performance metrics may also help companies attract the operations and leadership talent they need to design and support IT systems effectively. Indeed, our survey revealed that for most EA staffers, being seen as a valuable contributor to the bottom line may be more of an incentive than monetary rewards (Exhibit 2). In our experience, the individuals who take on EA-management responsibilities need a combination of deep smarts in business strategy and expertise on IT trends and technologies, integration patterns, business-process steps, and running a closed IT environment. These people do not need to be experts in coding or supply-chain planning or store operations, but they do need basic knowledge of all those things-and more. They must also have good communication and marketing skills. They must become ""ambassadors"" for enterprise architecture, helping business leaders and board directors alike understand the purpose and value generated by all the systems that underlie day-to-day operations. And they must be able to foster close collaboration between IT and business stakeholders. Because of the variety of skills required, CIOs may need to look outside the usual talent pools when recruiting, considering people with academic and business credentials as well as traditional technologists. Digital transformations are, by their very nature, complex. There are multiple moving parts, integrated processes and technologies, and the need for expertise that cannot already be found in the company. In most firms, however, there is a small cadre of technology professionals who can impose relative order on the proceedings. CEOs and CIOs should consider the benefits of pulling enterprise architects closer to the center: bringing them to the table with business leaders, devising metrics that reveal the value of their work, and creating the type of incentives that will challenge them and prompt them to stay for the long term. Such an approach is critical not just for limiting risk and protecting against the potential challenges and downsides of digital transformations but also for ensuring a clear upside-a close and lasting partnership between the business and IT. About the author(s) Oliver Bossert is a senior expert in McKinsey's Frankfurt office, and Jürgen Laartz is a senior partner in the Berlin office. The authors wish to thank Sharm Manwani, executive professor of IT leadership and director of the Strategy & Enterprise Architecture Programme at Henley Business School, for his contributions to this article.",en,t i t l e
26,26,26,1472046703,VIEW,9054050762437897017,-5527145562136413747,8804976775531983579,"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36",RJ,BR,CONTENT SHARED,9054050762437897017,-5527145562136413747,8804976775531983579,,,,HTML,http://blog.runrun.it/erros-vocabulario-pronuncia-em-ingles/,title,"Depois do baita sucesso que alcançamos com nosso post "" 71 erros de português que precisam sumir dos seus e-mails "", decidimos compilar agora os 71 erros de vocabulário e pronúncia em inglês para desaprender o quanto antes. Além disso, apresentamos expressões oportunas para o cotidiano. O intuito é elucidar as dúvidas do idioma que mais cedo ou mais tarde você terá de usar. E se você já escreve em inglês no dia a dia, mas sofre com algumas dúvidas, este post irá evitar que passe, digamos, uma vergonha internacional, por e-mail ou ao vivo. A propósito, leia também nosso artigo sobre o substituto do e-mail: o software de gestão do trabalho . Já ouviu falar? Empresas do mundo todo estão adotando ferramentas especializadas em transformar a maneira como as pessoas trabalham. a) Depende do contexto 1. Despite, In spite of / Although Elas têm praticamente o mesmo sentido, mas alteram a construção da frase. Veja: ""Despite"" e ""In spite of"" significam ""Apesar de"". Ex: ""Despite being experienced, he didn't get the job."" (Apesar de ser experiente, ele não conseguiu o emprego) ""Although"" significa ""Embora"". Ex: ""Although he was experienced, he didn't get the job."" (Embora ele fosse experiente, não conseguiu o emprego) 2. Look at / Look out / Look into / Look for / Look after At - olhar propriamente Out - ter cuidado Into - verificar For - procurar After - ansiar ""Uneducated"" significa estúpido. ""Rude"" significa mal-educado. Usamos ""Music"" quando nos referimos à Arte. Usamos ""Song"" para uma canção específica. 5. Shopping / Mall ""Shopping"" vem do verbo ""to shop"" (comprar). ""Mall"" ou ""Shopping Mall"" é o grande centro de compras. 6. Tough / Though / Thought / Thorough Tough é difícil. Though é ""embora"", ""no entanto"". Thought é o passado do verbo ""think"" (pensar). Thorough é minucioso, meticuloso. 7. Many / Much / A lot of ""Many"" ocorre antes de substantivos contáveis no plural. Ex: I have many friends. (Eu tenho muitos amigos.) ""A lot of"" antes de substantivos contáveis ou incontáveis e verbos. Ex: They work a lot. (Eles trabalham muito.) ""Much"" antes de substantivos incontáveis. Ex: Do you drink much water? (Você toma muita água?) 8. That / Which ""That"" se usa para restringir, classificar a oração anterior. Ex: ""I was wearing the dress that I bought to wear to Jo's party."" (Estava usando o vestido que comprei para a festa da Jo). ""Which"" se usa quando não há intenção de restringir a oração anterior. Ex: ""I bought a new dress, which I will be wearing to Jo's party."" (Comprei um vestido novo, que vou usar na festa da Jo). Aqui, o fato de usar o vestido na festa surge como um complemento casual do fato de ter comprado a roupa. b) A forma correta é a segunda Para dizer ""Mudei de ideia"", você se refere à sua mente. Só devemos usar ""Ask for"" quando esperamos receber algo. Ex: ""He asked for a hug."" (Ele pediu um abraço). Para expressar a idade, usa-se o verbo ""to be"" + o número de anos, podendo ser acompanhado da expressão ""years old"" (anos de idade). Use ""I have doubts"" apenas se for indicar desconfiança ou julgar que algo está errado. Por ex: ""I have doubts about these numbers"" (Estou descrente sobre estes números). Para dizer que você tem (ou não) tempo suficiente, use a segunda forma, com o adjetivo antes do substantivo. ""Can"", ""Could"", ""May"", ""Might"", ""Must"", ""Should"", nenhum desses verbos modais é acompanhado de preposição. Ex: ""You can do anything"", ""May I help you?"" e não ""You can to do anything"", ""May I to help you?"". A menos que você esteja orando, use a expressão ""Thank God"". Ela sim quer dizer ""Graças a Deus"". O número vem antes. Ex: ""There's one more week until I take my vacation."" Ex: ""It just depends on you"" (Isso só depende de você). Para dizer que perdeu o ônibus ou um voo, use ""to miss"". Para dizer que perdeu um objeto, como as chaves, use ""to lose"". Ex: I lost the keys. É como se diz ""Não tenho ideia"". Tomar uma decisão é ""Fazer uma decisão"" em inglês. ""Dar uma festa"" em inglês se diz com o verbo ""to have"" (ter). Palavras como ""Money"", ""Water"" e ""Information"" não são contáveis e, por isso, usamos ""some"", ""a lot of"", ""much"", ""any"". Essas são as formas corretas de dizer ""Acho que sim"" e ""Acho que não"". Usa-se ""an"" antes de substantivo iniciado com som de vogal, e ""a"" antes de substantivo iniciado com som de consoante ou semivogal. Em nosso caso, os sons iniciais das palavras 'University' e 'European' não são considerados sons vocálicos, mas semivocálicos, (iu). after aux verb do, the main verb of the sentence does not need to be conjugated) correct - Did you go there yesterday? c) Falsos cognatos (parece, mas não é) Para pretender, o verbo é ""to intend"". Lembre-se de intenção. Para dizer atualmente, use ""currently"". Lembre-se de tempo corrente. Para se referir aos parentes, use ""relatives"". Você pode usar ""habit"" para se referir a um costume. ""Context"" com xis é contexto em inglês. ""Necklace"" é colar. ""Factory"" é que significa fábrica. ""Soap Opera"" é o que você deve usar se está se referindo a uma novela. ""Supporter"" sim quer dizer adepto. 41. To be obliged (ser grato) Para dizer ""ser obrigado a"", use ""to be forced to"". Para dizer convicto, use ""convinced"" Para dizer decepção, use ""disappointment"" 44. Delectable: agradável, delicioso 45. Dependable: confiável 47. Genial: amável, agradável 48. Interest: juros 49. Preservative: conservante de alimentos 50. Library: biblioteca 51. Sensible: sábio, sensato 53. Valorous: destemido, corajoso d) Pronúncia em inglês (missão impossível?) 54. Year / Ear São quase idênticas. Mas o [i] de ""Year"" é um pouco mais longo do que o de ""Ear"". De olho no contexto! 55. World / Word Este vídeo dá uma ótima dica para aprender a diferença entre essas duas: diga as palavras ""wore"" e ""old"" juntas e você terá dito ""world""! 56. Terminação em -ED Quando a palavra termina em um som consonantal, como ""K"", a partícula -ED soa como T. Ex: Talked = ""Talkt"". Quando a palavra termina em um som consonantal, como ""R"", a partícula -ED soa como D. Ex: Bored = ""Bord"". Apenas quando a palavra termina em ""T"" ou ""D"", a partícula -ED soa como ""ED"". Ex: Effected = ""Effected"". 57. B mudo em ""MB"" e ""BT"" Quando B e M estão juntos ao final de uma palavra, não se pronuncia o B, apenas o M. O mesmo vale para quando B e T estão juntos. Ex: Bom(b), Clim(b), Num(b), De(b)t, Su(b)tle, Dou(b)t. e) Expressões oportunas 58. Meu dia está corrido ""My day is busy"". E não ""My day is run"". 59. A batata está assando ""A disaster is on the way"". E não ""The potato is baking"". 60. Onde Judas perdeu as botas ""In the middle of nowhere"". Jamais ""Where Judas has lost the boots"". 61. Pão-duro ""Stingy"". Nada de ""Hard bread"". 62. Deixa pra lá ""Forget about it"". Não se usa ""Leave it there"" nesse sentido. 63. Encher o saco ""To annoy someone"". Nem pensar dizer ""Fill the bag"". 64. Fazer uma tempestade num copo d'água ""To make a mountain out of a molehill"". Nunca diga ""To make a storm in a glass"". ""Busybody"". ""To go dutch"". Sem chance usar ""To make a little cow"". ""Gratuity"", que não é ""gratuidade"". ""Heyday"". ""Party favor"" - que não tem nada a ver com ""favores de festa"". ""Party of two"". Nem pensar ""Table for two"". 71. Você decide! It's up to you! E-mails? Você ainda troca e-mails? Agora que você deu um importante passo para não cometer mais erros de vocabulário e pronúncia em inglês ao vivo e em e-mails, é hora de avançar ainda mais. O número de e-mails e a forma como a troca de demandas fica desordenada provavelmente são um pesadelo diário para você e sua equipe. O fim do pesadelo está na contratação de uma ferramenta de gestão de projetos, tarefas e fluxo de trabalho, como o Runrun.it. Experimente grátis e sinta a diferença:",pt,t i t l e
27,27,27,1470076095,VIEW,1286494666178127087,3609194402293569455,4442154705713456410,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36",SP,BR,CONTENT SHARED,1286494666178127087,3609194402293569455,4442154705713456410,,,,HTML,http://www.inc.com/young-entrepreneur-council/whats-driving-the-internets-5-hottest-trends.html,title,"Trevor Sumner is a successful NYC-based technologist, CTO and co-founder of LocalVox , avid scuba diver, fisherman, amateur cook and adventure traveler. As the CTO of a marketing technology company, my main challenge is to keep up with rapid changes in technology and consumer behavior in order to create differentiated growth. In the last 10 years, mobile and social media have disrupted advertising, software and consumer electronics. Just like the rise of the PC and internet a decade before, these are foundational disruptions. Multiple groundbreaking technologies are looking to change how we interact with products, companies and each other, and they are being driven by a perfect storm of dependent innovation. It's an exciting time, particularly in five key ways. 1. Machine learning will exponentially heighten the intelligence of our apps and devices. Machine learning is defined as artificial intelligence that enables software to learn without being explicitly pre-programmed. These programs can be given general constraints and outcomes and teach themselves to grow and change as they are exposed to new data. If it sounds vague, that's because machine learning is applicable to a wide variety of problems, often highlighted by complexity or volumes of data. Machine learning is at the crux of language processing apps like Apple's Siri, Google Voice and Amazon's Alexa. It helps them understand us and even anticipate our follow-up questions. It's also powering marketing and advertising technology by offering personalized products and offers, even in areas as highly subjective as fashion . For example, StitchFix, an online personal stylist, can accurately predict the chances you will keep their clothing recommendations after receiving them in the mail. In addition, machine learning helps optimize logistics to better route drivers, predict travel times and optimize shipping and manufacturing processes. That same learning technology also powers the spatial processing necessary for self-driving cars to understand the complex world around them, when to react and prevent accidents, and how to predict the behavior of others. Those same visual libraries are being used to index images and videos for search, power facial recognition and much more. It's no wonder the term ""machine learning"" has increased threefold in Google Trends over the last three years. 2. The Internet of Things (IoT) will activate everything around us. IoT enables everyday objects to have network connectivity to send and receive data. IoT unlocks all kinds of possibilities: smart watches that record our biometrics; Amazon Dash, a magnet on your fridge that can order household items automatically when you run out; or your Nest thermostat that you can control from your smartphone miles away. Just as the PC's usefulness grew exponentially when connected to the internet, so too will the everyday objects around you. Realizing the dreams of a truly networked world at the appliance level has required some key advancements. Because many IoT objects will rarely be connected to a power source, they must use power wisely. Next-generation batteries, energy conservation and low-energy communication protocols are the keys to ensuring devices aren't bulky, inconvenient or expensive. And because their form factors are often small and tactile, simplified interfaces are important for success. Voice, tactile and highly-simplified screen interfaces like Alexa, Amazon Dash and Nest require extraordinary UX/UI design, as convenience will drive consumer adoption. The inside story of Amazon Echo is a great lesson on the extraordinary efforts needed to get an IoT product right. 3. Mobile will continue to influence our lives. The internet advertising industry has grown 20 percent year-over-year and is largely fueled by mobile, which has grown 66 percent YoY. Still, mobile only represents 12 percent of spend versus 25 percent of time spent, which is to say mobile advertising still has room to double. Entire generations are shifting from watching TV to watching video on mobile. More people watched the MTV Music Awards and college football on Snapchat than on TV. Every aspect of video production, management and delivery will have to improve at lower costs to keep up with demand. As well, messaging is being adopted in all areas of our lives, especially Asia, which is ahead in this area. It's changing the way people bank, hail a taxi or buy online. In the enterprise space, Slack took just one year to hit a $1 billion valuation. Lastly, upcoming 5G networks will unlock unparalleled speeds that will untether us all from hardline cable and fiber. There will be a huge investment in infrastructure over the next five years, and traditional hardline vendors, like cable companies, are going to struggle when the internet is truly mobile. When data is ubiquitous, inexpensive and lightning fast, data-heavy services will become completely unshackled. 4. Augmented and virtual reality will become reality. The popularity of Snapchat and MSQRD prove that we inherently want to create augmented digital versions of ourselves, and MagicLeap has shown that we are not too far away from groundbreaking realism in augmented reality. After a decade of talk, we are finally close to the ""Minority Report"" experience. In its first week, Pokemon Go, has experienced more daily active users than Twitter , demonstrating a mass market desire to have fun in an AR/VR environment. However, there simply isn't enough AR/VR content to fulfill projected usage, which represents a huge opportunity for content creators. There is a tremendous amount of processing power needed to fuel these apps, and a new wave of consumer hardware with AR/VR at the forefront will help reinvigorate flat smartphone sales . Networked 360-degree cameras made popular by Google Maps will now be in our hands and will help make the mapping of physical-to-virtual worlds photo-realistic. VR will force society as a whole to reevaluate our role of the physical world, how much time we spend ""plugged in,"" and how we can spend time creating a better reality. 5. Security will underlie all big changes. We are in an extremely fragile state in terms of security. Enterprises are underprepared for cyber attacks, the director of the FBI calls cybercrime a top threat, and news of hackers stealing millions of personal records has become commonplace . We are enabling the objects around us to collect more intimate data, like where we are, when we sleep, what brands we buy and how often, and whether or not we exercise. Beyond new transactional and authentication protocols like Blockchain, security needs to be embedded as a primary layer in every application. That's a daunting challenge for governments, enterprises and individuals, and it will be interesting to see how much fraud and cyber crime we are willing to tolerate as part of our systems. With these five key trends, our world is changing faster than ever before. Prepare yourself -- and your business -- for what's set to have a huge impact on the way our lives operate.",en,t i t l e
28,28,28,1473162790,VIEW,-7620438371471449873,-1479311724257856983,-23057489337913675,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36",SP,BR,CONTENT SHARED,-6772940823843058601,-1402490765047599382,6366377273742956136,,,,HTML,http://exame.abril.com.br/tecnologia/noticias/visa-inaugura-centro-para-inovacao-em-pagamento-digital,title,"São Paulo - A Visa deu mais um passo para acabar com o cartão de crédito físico. A empresa inaugura nesta quinta-feira seu primeiro centro de inovação no Brasil, localizado em sua sede na capital paulista. O foco é o desenvolvimento de novos métodos de pagamento digital a partir de parcerias com startups , empresas e desenvolvedores. ""O centro de inovação muda a forma como dialogamos com nossos desenvolvedores e clientes"", falou a EXAME.com Érico Fileno, diretor executivo de produtos da Visa no Brasil. ""Ele amplia a atuação da empresa e desenvolve inovações de uma forma mais rápida."" A ideia é que a parceria com startups traga inovação a pagamentos digitais. ""Queremos mudar a imagem de que um produto foi 'feito pela Visa' para 'habilitado pela Visa'"", falou a EXAME.com Percival Jatobá, vice-presidente de produtos da Visa no Brasil. Neste momento, o foco da Visa é em duas tecnologias que podem mudar o mercado de pagamentos digitais: biometria e internet das coisas. ""A internet das coisas vai transformar a maneira como a sociedade faz e recebe pagamentos"", diz Jatobá. ""Não teremos conexão com uma máquina, mas com várias máquinas ao mesmo tempo."" Segundo uma pesquisa da empresa, 50 bilhões de máquinas estarão interconectadas em 2020. Para o executivo, essas mudanças não assustam. Ele explica que a Visa passou por um momento de educar o mercado na transição do cartão de tarja para o chip (com o qual se usa uma senha eletrônica). ""Naquela época, fizemos um projeto de aculturamento do comércio. Com pagamentos móveis, teremos que fazer esse processo novamente."" Para que tudo isso fosse possível, no entanto, uma mudança iniciada no começo deste ano foi crucial: a permissão para que desenvolvedores externos acessem os sistemas da Visa . ""Apenas com a abertura dos nossos sistemas conseguiremos criar novas tecnologias"", falou a EXAME.com José María Ayuso, vice-presidente de produtos da Visa na América Latina. Uber dos pagamentos Pelo programa Visa Developer , a empresa já concede acessos a 11 APIs (sigla para interfaces de programa de aplicação), que permitem a comunicação entre sistemas da Visa e externos. Kits de desenvolvimento de software também foram disponibilizados. Essa estratégia, diz Ayuso, faz parte da ""uberização"" do mercado. O termo é uma alusão ao Uber , que não criou sistemas de mapeamento, pagamento ou comunicação. Em vez disso, usou APIs abertas para viabilizar o serviço. O espaço em São Paulo não é o primeiro do tipo. Outros estão em cidades como Dubai, São Francisco e Londres. Aqui, fica localizado dentro da própria sede da empresa. O espaço tem clima mais descontraído do que o restante da empresa. Produtos como relógios , pulseiras e anéis de pagamentos ficam disponíveis para testes. Ayuso diz que o Brasil foi uma escolha fácil. ""O país comporta mais da metade do volume de negócios da Visa na América Latina. De todas as transações de e-commerce feitas na América Latina, 60% são feitas aqui."" Outro fator que pesou foi o fato de que os bancos brasileiros inovam rápido. Neste início, a Visa fechou uma parceria com a Farm, aceleradora de startups. ""Afinal, a Visa também já foi uma startup e se tornou uma grande empresa devido ao pensamento disruptivo de um indivíduo, o nosso fundador"", diz Jatobá. Centros como esse podem ajudar a acabar com os cartões físicos. Mas é um plano para longo prazo. ""Talvez, no futuro, as pessoas não utilizem mais o cartão de crédito físico. Mas não acredito que a minha geração ou ainda a próxima irá descarta-lo"", diz Ayuso.",pt,t i t l e
29,29,29,1474974977,VIEW,-6400214860728938634,434517017614495946,6335600397178321430,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36",SP,BR,CONTENT SHARED,-721732705314803549,-9047547311469006438,2070103150891815266,,,,HTML,http://www.fabioprado.net/2016/09/webinario-como-analisar-um-awr-report.html,title,"No post de hoje quero apenas comunicar que no dia 27/9/16, às 21h, irei participar do Terça de Dados do Grupo DBA Brasil , mostrando para você como analisar um AWR Repor t. Apresentarei um report de um ex-aluno da última turma do treinamento Database Performance Tuning , que foi gerado em um período em que o Banco de Dados de uma empresa da área financeira, estava com desempenho ruim. Comentarei sobre as principais características do banco de dados e os principais problemas que ocorreram nele, naquele período. NÃO PERCA, VOCÊ PODERÁ ASSISTIR O VÍDEO NO QUADRO ABAIXO! Todos que assistirem o evento AO VIVO poderão fazer perguntas e deixar os seus comentários nessa página que eu responderei todas elas ao final da apresentação!",pt,t i t l e
30,30,30,1476701220,VIEW,-1452340812018195881,2754566407772265068,2696213052470456528,"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",MG,BR,CONTENT SHARED,-6537529846890876234,-1443636648652872475,7616379009371164598,Android - Native Mobile App,SP,BR,HTML,http://www.geekwire.com/2016/just-shut-let-devs-concentrate-programming-expert-advises/,title,"If you want to attract and keep developers, don't emphasize ping-pong tables, lounges, fire pits and chocolate fountains. Give them private offices or let them work from home, because uninterrupted time to concentrate is the most important and scarcest commodity. That's the view of Joel Spolsky, CEO of Stack Overflow, a popular Q&A site for programmers, who spoke this morning at the GeekWire Summit in Seattle. ""Facebook's campus in Silicon Valley is an 8-acre open room, and Facebook was very pleased with itself for building what it thought was this amazing place for developers,"" Spolsky said in an interview with GeekWire co-founder Todd Bishop. ""But developers don't want to overhear conversations. That's ideal for a trading floor, but developers need to concentrate, to go to a chatroom and ask questions and get the answers later. Facebook is paying 40-50 percent more than other places, which is usually a sign developers don't want to work there."" Spolsky, who in 2011 created project-management software Trello , said the "" Joel Test "" that he created 16 years ago is still a valid way for developers to evaluate prospective employers. It's a list of 12 yes-no questions, with one point given for every ""yes"" answer. ""The truth is that most software organizations are running with a score of 2 or 3, and they need serious help, because companies like Microsoft run at 12 full-time,"" Spolsky said when he created the test. He said that remains true today. ""Microsoft figured out a way to create software with a high degree of sanity,"" he said. ""It's surprising that hasn't spread."" Among other tips, he suggested that a company wanting to empower devs appoint a leader who's a developer herself. Speaking of diversity, Spolsky said he'd like to replace the default StackOverflow avatar with a random image - a woman or a person of color, for example. Meanwhile, ""I'd like to encourage people there to self-identify so they can be role models for others,"" he said. The move to the cloud has made life ""insanely different"" for developers, Spolsky noted. Languages tend to be much higher-level than in the past, restricting access to low-level functions or even keeping devs ignorant of what's happening under the covers. According to StackOverflow surveys , favorite programming tools currently include Rust, Swift and F#, while those ""most dreaded"" include Visual Basic, WordPress and Matlab. But Spolsky played down those surveys, saying programmers have ""a desire to use the latest, cool new thing"" and tend to move on from programming quickly, so that their ranks are filled by ""new kids showing up with newfangled things they just invented, usually reinventing the wheel."" GeekWire is once again proud to partner with Bank of America to support Geeks Give Back , a community-wide effort to raise $1 million for the Washington State Opportunity Scholarship. This unique program provides scholarships to deserving students, the majority of whom are women and students of color, who are pursuing degrees in science, technology, engineering and math in Washington state. To donate as an individual or corporation, visit GeeksGiveBack.org today!",en,t i t l e
31,31,31,1479139842,VIEW,8353614127518545485,-1443636648652872475,-4000600378394883873,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",SP,BR,CONTENT SHARED,8353614127518545485,-1443636648652872475,-4000600378394883873,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",SP,BR,HTML,https://blog.google/products/google-play/introducing-the-new-google-play-music/,title,"Whether reminding you to leave to catch your flight, helping you find pictures of your daughter's recital, or suggesting the right Smart Reply , Google builds tools that help you make the world of information more accessible and useful. And at Google Play Music, we strive for the same. Building on our commitment to help you find the right music for any moment, today we're introducing the new Google Play Music - a fresh take on our music streaming service that is smarter, easier to use, and much more assistive. To deliver that, Google Play Music uses machine learning to figure out what music you like and then mixes in signals like location, activity, and the weather along with hand-picked playlists to personalize music for wherever you are and whenever you want tunes. Starting this week on Android , iOS and the web , the new experience will roll out globally (62 countries, to be precise). DON'T THINK TWICE, IT'S ALL RIGHT To provide even richer music recommendations based on Google's understanding of your world, we've plugged into the contextual tools that power Google products. When you opt in, we'll deliver personalized music based on where you are and why you are listening - relaxing at home, powering through at work, commuting, flying, exploring new cities, heading out on the town, and everything in between. Your workout music is front and center as you walk into the gym, a sunset soundtrack appears just as the sky goes pink, and tunes for focusing turn up at the library.",en,t i t l e
32,32,32,1479811220,VIEW,5313335392004163852,3938645257702379823,-1854582832753019347,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36",SP,BR,CONTENT SHARED,5313335392004163852,3938645257702379823,-1854582832753019347,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36",SP,BR,HTML,https://www.salesforce.com/blog/2016/11/new-salesforce-architect-journey.html,title,"So you want to be a Salesforce Certified Technical Architect? You're a ninja in governance and know how to design high-performing technical solutions? A master in all things Salesforce Platform, and want to show off your expertise? We have a new Architect Journey for you. It's no secret that our Certified Technical Architects (CTAs) have supercharged their careers by holding one of the top and most lucrative technology credentials. Not to mention, they provide tremendous value to our customers by giving sound and strategic guidance for successful go-lives. And since we are passionate about building out our community of Architects, we want to make it easier for you to join the club. At Dreamforce, we announced that all the training resources are now available for FREE! That's right! Everything that used to be in the Architect Academy catalog is now yours to browse through, practice, and learn to your heart's content. OK, where do I start, you might ask? Let's take a look at the new Architect Journey. This new framework lets you take two different paths before you reach the top: You can first become an Application Architect or a System Architect. Each of these two new domains have their own distinct paths, giving you the flexibility to move forward in a way that works best for you. Let's explore it, step-by-step, starting from the beginning. Your journey should always include Trailhead, the self-guided and fun way to learn Salesforce. There are so many excellent trails for both Developers and Admins, discussing every aspect of our Platform. Make sure to check those out. Next, we recommend that you become Salesforce Administrator Certified (which you don't have to do as a requirement for the CTA and Domain Architect, but we highly recommend it, as it'll give you great foundational knowledge.) Now you're ready to start your stepping-stone path towards three levels of Architect Credentials: Domain Designer -- Become a Specialist With six new specialized Domain Designer exams, you can now become industry-recognized for your specific area of expertise. Whether it's Sharing and Visibility, or Identity and Access that pique your interest, there's a specialist credential for you. And when you combine your specialization with the Platform Developer I and Platform App Builder certifications, you can then start to navigate towards the new Domain Architect level. Domain Architect -- Be the Expert Prove you have extensive and deep architecture knowledge in Salesforce Application or System Architecture. Not only will this validate your full scope of expertise, but it will also drive your career growth. And best of all, there's no additional exam - after you earn all the certifications in the relevant tier, you will automatically achieve a Domain Architect credential. Technical Architect -- Reach the Summit If your ultimate goal is to become one of the Salesforce elite and join the exclusive few who can boast CTA status, this new journey will help you on your way. Once you have achieved both Domain Architect certifications (and if you have also taken action on our strong recommendation to get both your Community Cloud Consultant and Mobile Solutions Architecture Designer certs), you'll be more qualified and prepared than ever to present at the CTA review board exam. Not only are each of these three levels better defined, but they are also more attainable. You now have your journey mapped out: unlimited access to the trails in Trailhead, as well a full library of self-directed training guides (eBooks), curated under the guidance of our CTA community so you can learn directly from the real experts. Content includes reference materials, videos, technical documentation, and specific build case scenarios that help you practice. Each eBook guide is aligned to a specific certification on the Architect Journey. And did we mention these guides are now FREE? If you are still reading this and didn't try to jump straight to a ""Learn More"" link as soon as you saw the words FREE guides , check out our detailed Architect Journey Overview and the individual Architect Certifications now available to you. And if you're just too excited and want to get started now, here are all the Architect eBooks . Happy trails, you Architect hopefuls...we look forward to following your progress to the Summit!",en,t i t l e
33,33,33,1480505675,VIEW,4746056663292225769,-1443636648652872475,-626807706800024466,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",SP,BR,CONTENT SHARED,4746056663292225769,-1443636648652872475,-626807706800024466,"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",SP,BR,HTML,https://www.fastcompany.com/3065228/mind-and-machine/how-pinterest-uses-machine-learning-to-keep-its-users-pinned,title,"Thanks to recent gains in machine learning, computers are getting skilled at picking out patterns and features in text and images. That's how e-commerce giants like Amazon and eBay build sophisticated recommendation systems and how social networks like Facebook and Twitter are tweaking feeds to keep users hooked . Pinterest is no exception, with 30% of engagement tied to personalized real-time suggestions. Here's how Pinterest engineers are leveraging artificial intelligence to keep the website's 150 million-plus users pinning and sharing. Machine learning can not only determine the subject of an image, it can also identify visual patterns and match them to other photos. Pinterest is using this technology to process 150 million image searches per month, helping users find content that looks like pictures they've already pinned. Pin a photo of a cheetah-print pillow, and Pinterest will serve up animal-print decor from other users. Future iterations of the Pinterest app may let users simply point their cameras at real-world objects to get instant recommendations. If a user pins a mid-century dining-room table, the platform can now offer suggestions of other objects from the same era. The key? Metadata, such as the names of pinboards and websites where images have been posted, helps the platform understand what photos represent. While many platforms prioritize content from a user's friends and contacts, Pinterest pays more attention to an individual's tastes and habits-what they've pinned and when-enabling the site to surface more personalized recommendations. After all, friends who like the same recipes may not agree at all on fashion. Pinterest is an increasingly global platform, with more than half of its users based outside the U.S. Its recommendation engine has learned to suggest popular content from users' local region in their native language. One finding: Slow-cooker recipes are more popular in the U.S. than the U.K., where the appliances aren't as common. Analyzing what's in a photo is a big factor in the site's recommendations, but it doesn't offer the whole story. Pinterest also looks at captions from previously pinned content and which items get pinned to the same virtual boards. That allows Pinterest to, say, link a particular dress to the pair of shoes frequently pinned alongside it, even if they look nothing alike. A version of this article appeared in the December 2016/January 2017 issue of Fast Company magazine.",en,t i t l e
